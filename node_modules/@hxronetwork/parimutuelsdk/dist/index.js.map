{"version":3,"file":"index.js","sources":["../src/borsh/Version.ts","../src/instructions/ata.ts","../src/borsh/FixedFees.ts","../src/borsh/LinearFees.ts","../src/borsh/TwoTieredFees.ts","../src/types/enum.ts","../src/borsh/MultiTieredFees.ts","../src/borsh/Network.ts","../src/borsh/Store.ts","../src/borsh/Market.ts","../src/borsh/Parimutuel.ts","../src/borsh/TraderAccount.ts","../src/borsh/TraderPositionAccount.ts","../src/borsh/TraderEntryAccount.ts","../src/borsh/TraderSequenceNumber.ts","../src/borsh/args.ts","../src/borsh/schema.ts","../src/instructions/attachCookie.ts","../src/instructions/network.ts","../src/instructions/updatePrice.ts","../src/instructions/networkTraderFeePayer.ts","../src/instructions/traderAccounts.ts","../src/instructions/traderPositionAccount.ts","../src/instructions/parimutuel.ts","../src/instructions/store.ts","../src/instructions/placePosition.ts","../src/instructions/settlePosition.ts","../src/instructions/withdrawFee.ts","../src/instructions/destroyParimutuel.ts","../src/instructions/destroyPositionEntry.ts","../src/instructions/destroyPosition.ts","../src/utils/borsh.ts","../src/utils/parimutuel.ts","../src/constants/parimutuel.ts","../src/utils/utils.ts","../src/utils/pubkey.ts","../src/utils/rpc.ts","../src/utils/time.ts","../src/utils/decode.ts","../src/utils/connection.ts","../src/web3/config.ts","../src/transactions/attachCookie.ts","../src/transactions/createParimutuel.ts","../src/transactions/createStore.ts","../src/transactions/updatePrice.ts","../src/transactions/placePosition.ts","../src/transactions/settlePosition.ts","../src/transactions/withdrawFee.ts","../src/transactions/depositFee.ts","../src/transactions/transferToken.ts","../src/transactions/updateNetwork.ts","../src/transactions/destroyParimutuel.ts","../src/transactions/destroyPositionEntry.ts","../src/transactions/destroyPosition.ts","../src/queries/getNetwork.ts","../src/queries/getMarkets.ts","../src/queries/getParimutuels.ts","../src/queries/getPositions.ts","../src/queries/getEntries.ts","../src/queries/getFees.ts","../src/queries/getNetworkTraderAccount.ts","../src/queries/getTraderFeePayerAccount.ts","../src/queries/getStore.ts","../src/web3/web3.ts","../src/utils/number.ts","../src/instructions/market.ts","../src/instructions/traderSequenceNumber.ts","../src/instructions/transferFunds.ts","../src/utils/crypto.ts","../src/transactions/createNetworkTraderFeePayer.ts","../src/transactions/createTraderAccounts.ts","../src/transactions/createTraderPositionAccount.ts"],"sourcesContent":["export enum Version {\n  Uninitialized,\n  NetworkV1,\n  MarketV1,\n  StoreV1,\n  ParimutuelV1,\n  TraderAccountV1,\n  ParimutuelTraderPositionAccountV1,\n  TraderSequenceNumberV1,\n  FixedFeesV1,\n  LinearFeesV1,\n  ParimutuelTraderEntryV1,\n  TwoTieredFeesV1,\n  MultiTieredFeesV1,\n}\n","import {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\n\nexport const createAssociatedTokenAccountInstruction = (\n  associatedTokenPubkey: PublicKey,\n  payerPubkey: PublicKey,\n  walletPubkey: PublicKey,\n  splTokenMintPubkey: PublicKey\n): TransactionInstruction => {\n  const keys = [\n    {\n      pubkey: payerPubkey,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenPubkey,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n\n  return new TransactionInstruction({\n    keys,\n    programId: ASSOCIATED_TOKEN_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n","import BN from 'bn.js';\n\nexport class FixedFees {\n  enum: number = 1;\n  version: number;\n  protocolFeeBps: BN;\n  settlementFeeBps: BN;\n  _padding1: number = 0;\n  _padding2: number = 0;\n  _padding8: BN = new BN(0);\n  _padding16: BN = new BN(0);\n  _padding8_0: BN = new BN(0);\n  _padding8_1: BN = new BN(0);\n  _padding8_2: BN = new BN(0);\n  _padding8_3: BN = new BN(0);\n\n  constructor(args: {\n    version: number;\n    protocolFeeBps: number;\n    settlementFeeBps: number;\n  }) {\n    this.version = args.version;\n    this.protocolFeeBps = new BN(args.protocolFeeBps);\n    this.settlementFeeBps = new BN(args.settlementFeeBps);\n  }\n}\n","import BN from 'bn.js';\n\nexport class LinearFees {\n  enum: number = 2;\n  version: number;\n  protocolTokenRequiredForMinFee: BN;\n  minProtocolFeeBps: number;\n  maxProtocolFeeBps: number;\n  minSettlementFeeBps: number;\n  maxSettlementFeeBps: number;\n  _padding1: number = 0;\n  _padding2: number = 0;\n  _padding4: number = 0;\n  _padding8: BN = new BN(0);\n  _padding8_0: BN = new BN(0);\n  _padding8_1: BN = new BN(0);\n  _padding8_2: BN = new BN(0);\n  _padding8_3: BN = new BN(0);\n\n  constructor(args: {\n    version: number;\n    protocolTokenRequiredForMinFee: BN;\n    minProtocolFeeBps: number;\n    maxProtocolFeeBps: number;\n    minSettlementFeeBps: number;\n    maxSettlementFeeBps: number;\n  }) {\n    this.version = args.version;\n    this.protocolTokenRequiredForMinFee = args.protocolTokenRequiredForMinFee;\n    this.minProtocolFeeBps = args.minProtocolFeeBps;\n    this.maxProtocolFeeBps = args.maxProtocolFeeBps;\n    this.minSettlementFeeBps = args.minSettlementFeeBps;\n    this.maxSettlementFeeBps = args.maxSettlementFeeBps;\n  }\n}\n","import BN from 'bn.js';\n\nimport { LinearFees } from './LinearFees'\n\nexport class TwoTieredFees extends LinearFees {\n  enum: number = 3;\n\n  constructor(args: {\n    version: number;\n    protocolTokenRequiredForMinFee: BN;\n    minProtocolFeeBps: number;\n    maxProtocolFeeBps: number;\n    minSettlementFeeBps: number;\n    maxSettlementFeeBps: number;\n  }) {\n    super(args);\n  }\n}\n","export enum CryptoEnum {\n  SOLANA = 'solana',\n  USDC = 'usdc',\n  HXRO = 'hxro',\n}\n\nexport enum MarketEnum {\n  PARIMUTUEL = 'parimutuel',\n  OPTIONS = 'options',\n}\n\nexport enum MarketTypeEnum {\n  CRYPTO = 'crypto',\n  FINANCIAL = 'financial',\n  SPORTS = 'sports',\n}\n\nexport enum MarketPairEnum {\n  BTCUSD = 'BTCUSD',\n  SOLUSD = 'SOLUSD',\n  ETHUSD = 'ETHUSD',\n  HXROUSD = 'HXROUSD',\n}\n\nexport enum CurrencyEnum {\n  USDC = 'USDC',\n  HXRO = 'HXRO',\n}\n\nexport enum DurationEnum {\n  ONE_MIN = '1min',\n  FIVE_MIN = '5min',\n  FIFTEEN_MIN = '15min',\n  ONE_HOUR = '1hour',\n  ONE_DAY = '1day',\n}\n\nexport enum MarketStatusEnum {\n  UPCOMING = 'upcoming',\n  LIVE = 'live',\n  SETTLED = 'settled',\n}\n\nexport enum PositionSideEnum {\n  SHORT = 1,\n  LONG = 0,\n}\n","export class MultiTieredFees {\n  enum: number = 4;\n  version: number;\n  tiers: number;\n  stakedAmount: Array<number>;\n  settlementFeeBps: Array<number>;\n  _padding1: number = 0;\n\n  constructor(args: {\n    version: number;\n    tiers: number;\n    stakedAmount: Array<number>;\n    settlementFeeBps: Array<number>;\n  }) {\n    this.version = args.version;\n    this.tiers = args.tiers;\n    this.stakedAmount = args.stakedAmount;\n    this.settlementFeeBps = args.settlementFeeBps;\n  }\n}\n","import { LinearFees } from './LinearFees';\n\nexport class Network {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  authority: string;\n  protocolToken: string;\n  settlementToken: string;\n  protocolProductOracle: string;\n  protocolPriceOracle: string;\n  protocolFeeCollector: string;\n  settlementFeeCollector: string;\n  fee: LinearFees;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    authority: string;\n    protocolToken: string;\n    settlementToken: string;\n    protocolProductOracle: string;\n    protocolPriceOracle: string;\n    protocolFeeCollector: string;\n    settlementFeeCollector: string;\n    fee: LinearFees;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.authority = args.authority;\n    this.protocolToken = args.protocolToken;\n    this.settlementToken = args.settlementToken;\n    this.protocolProductOracle = args.protocolProductOracle;\n    this.protocolPriceOracle = args.protocolPriceOracle;\n    this.protocolFeeCollector = args.protocolFeeCollector;\n    this.settlementFeeCollector = args.settlementFeeCollector;\n    this.fee = args.fee;\n  }\n}\n","import { FixedFees } from './FixedFees';\n\nexport class Store {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  marketKey: string;\n  wallet: string;\n  protocolFeeCollector: string;\n  settlementFeeCollector: string;\n  fee: FixedFees;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    marketKey: string;\n    wallet: string;\n    protocolFeeCollector: string;\n    settlementFeeCollector: string;\n    fee: FixedFees;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.marketKey = args.marketKey;\n    this.wallet = args.wallet;\n    this.protocolFeeCollector = args.protocolFeeCollector;\n    this.settlementFeeCollector = args.settlementFeeCollector;\n    this.fee = args.fee;\n  }\n}\n","import BN from 'bn.js';\n\nimport { FixedFees } from './FixedFees';\n\nexport class Market {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  authority: string;\n  network: string;\n  underlyingProductOracle: string;\n  underlyingPriceOracle: string;\n  duration: BN;\n  contractSize: BN;\n  protocolFeeCollector: string;\n  settlementFeeCollector: string;\n  fee: FixedFees;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    authority: string;\n    network: string;\n    underlyingProductOracle: string;\n    underlyingPriceOracle: string;\n    duration: BN;\n    contractSize: BN;\n    protocolFeeCollector: string;\n    settlementFeeCollector: string;\n    fee: FixedFees;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.authority = args.authority;\n    this.network = args.network;\n    this.underlyingProductOracle = args.underlyingProductOracle;\n    this.underlyingPriceOracle = args.underlyingPriceOracle;\n    this.duration = args.duration;\n    this.contractSize = args.contractSize;\n    this.protocolFeeCollector = args.protocolFeeCollector;\n    this.settlementFeeCollector = args.settlementFeeCollector;\n    this.fee = args.fee;\n  }\n}\n","import BN from 'bn.js';\n\nimport { LinearFees } from './LinearFees';\n\nexport class Parimutuel {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  strike: BN;\n  index: BN;\n  slot: BN;\n  marketOpen: BN;\n  marketClose: BN;\n  timeWindowStart: BN;\n  marketKey: string;\n  honeypot: string;\n  numPositions: BN;\n  numPositionsSettled: BN;\n  numPositionsDestroyed: BN;\n  expired: boolean;\n  rewardPerShare: BN;\n  activeLongPositions: BN;\n  activeShortPositions: BN;\n  networkFees: LinearFees;\n  marketFees: LinearFees;\n  creator: string;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    strike: BN;\n    index: BN;\n    slot: BN;\n    marketOpen: BN;\n    marketClose: BN;\n    timeWindowStart: BN;\n    marketKey: string;\n    honeypot: string;\n    numPositions: BN;\n    numPositionsSettled: BN;\n    numPositionsDestroyed: BN;\n    expired: boolean;\n    rewardPerShare: BN;\n    activeLongPositions: BN;\n    activeShortPositions: BN;\n    networkFees: LinearFees;\n    marketFees: LinearFees;\n    creator: string;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.strike = args.strike;\n    this.index = args.index;\n    this.slot = args.slot;\n    this.marketOpen = args.marketOpen;\n    this.marketClose = args.marketClose;\n    this.timeWindowStart = args.timeWindowStart;\n    this.marketKey = args.marketKey;\n    this.honeypot = args.honeypot;\n    this.numPositions = args.numPositions;\n    this.numPositionsSettled = args.numPositionsSettled;\n    this.numPositionsDestroyed = args.numPositionsDestroyed;\n    this.expired = args.expired;\n    this.rewardPerShare = args.rewardPerShare;\n    this.activeLongPositions = args.activeLongPositions;\n    this.activeShortPositions = args.activeShortPositions;\n    this.networkFees = args.networkFees;\n    this.marketFees = args.marketFees;\n    this.creator = args.creator;\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderAccount {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  traderWallet: string;\n  aggregationLevelKey: string;\n  profit: BN;\n  loss: BN;\n  wins: BN;\n  losses: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    traderWallet: string;\n    aggregationLevelKey: string;\n    profit: number;\n    loss: number;\n    wins: number;\n    losses: number;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.traderWallet = args.traderWallet;\n    this.aggregationLevelKey = args.aggregationLevelKey;\n    this.profit = new BN(args.profit);\n    this.loss = new BN(args.loss);\n    this.wins = new BN(args.wins);\n    this.losses = new BN(args.losses);\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderPositionAccount {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  sequenceNumber: BN;\n  parimutuel: string;\n  traderWallet: string;\n  hasStore: boolean;\n  store: string;\n  longPosition: BN;\n  shortPosition: BN;\n  numEntries: BN;\n  paid: boolean;\n  payout: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    sequenceNumber: BN;\n    parimutuel: string;\n    traderWallet: string;\n    hasStore: boolean;\n    store: string;\n    longPosition: BN;\n    shortPosition: BN;\n    numEntries: BN;\n    paid: boolean;\n    payout: BN;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.sequenceNumber = args.sequenceNumber;\n    this.parimutuel = args.parimutuel;\n    this.traderWallet = args.traderWallet;\n    this.hasStore = args.hasStore;\n    this.store = args.store;\n    this.longPosition = args.longPosition;\n    this.shortPosition = args.shortPosition;\n    this.numEntries = args.numEntries;\n    this.paid = args.paid;\n    this.payout = args.payout;\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderEntryAccount {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  traderPosition: string;\n  sequenceNumber: BN;\n  traderWallet: string;\n  direction: number;\n  amount: BN;\n  timestamp: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    traderPosition: string;\n    sequenceNumber: BN;\n    traderWallet: string;\n    direction: number;\n    amount: BN;\n    timestamp: BN;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.traderPosition = args.traderPosition;\n    this.sequenceNumber = args.sequenceNumber;\n    this.traderWallet = args.traderWallet;\n    this.direction = args.direction;\n    this.amount = args.amount;\n    this.timestamp = args.timestamp;\n  }\n}\n","import BN from 'bn.js';\n\nexport class TraderSequenceNumber {\n  version: number;\n  programId: string;\n  bumpSeed: number;\n  parimutuel: string;\n  traderKey: string;\n  sequenceNumber: BN;\n\n  constructor(args: {\n    version: number;\n    programId: string;\n    bumpSeed: number;\n    parimutuel: string;\n    traderKey: string;\n    sequenceNumber: BN;\n  }) {\n    this.version = args.version;\n    this.programId = args.programId;\n    this.bumpSeed = args.bumpSeed;\n    this.parimutuel = args.parimutuel;\n    this.traderKey = args.traderKey;\n    this.sequenceNumber = args.sequenceNumber;\n  }\n}\n","import BN from 'bn.js';\nimport { FixedFees } from './FixedFees';\nimport { LinearFees } from './LinearFees';\nimport { TwoTieredFees } from './TwoTieredFees';\nimport { MultiTieredFees } from './MultiTieredFees';\n\nexport type DynamicFees = LinearFees | TwoTieredFees | MultiTieredFees;\n\nexport class NetworkArgs {\n  instruction: number = 0;\n  fees: DynamicFees;\n\n  constructor(args: { fees: DynamicFees }) {\n    this.fees = args.fees;\n  }\n}\n\nexport class NetworkUpdateArgs {\n  instruction: number = 14;\n  fees: DynamicFees;\n\n  constructor(args: { fees: DynamicFees }) {\n    this.fees = args.fees;\n  }\n}\n\nexport class MarketArgs {\n  instruction: number = 1;\n  duration: BN;\n  contractSize: BN;\n  fees: FixedFees;\n\n  constructor(args: {\n    duration: number;\n    contractSize: number;\n    fees: FixedFees;\n  }) {\n    this.duration = new BN(args.duration);\n    this.contractSize = new BN(args.contractSize);\n    this.fees = args.fees;\n  }\n}\n\nexport class StoreArgs {\n  instruction: number = 2;\n  fees: FixedFees;\n\n  constructor(args: { fees: FixedFees }) {\n    this.fees = args.fees;\n  }\n}\n\nexport class ParimutuelArgs {\n  instruction: number = 3;\n  marketOpen: BN;\n  marketClose: BN;\n  timeWindowStart: BN;\n\n  constructor(args: {\n    marketOpen: number;\n    marketClose: number;\n    timeWindowStart: number;\n  }) {\n    this.marketOpen = new BN(args.marketOpen);\n    this.marketClose = new BN(args.marketClose);\n    this.timeWindowStart = new BN(args.timeWindowStart);\n  }\n}\n\nexport class UpdatePriceArgs {\n  instruction: number = 4;\n}\n\nexport class TraderAccountsArgs {\n  instruction: number = 5;\n}\n\nexport class TraderPositionAccountArgs {\n  instruction: number = 6;\n}\n\nexport class TraderSequenceNumberArgs {\n  instruction: number = 7;\n}\n\nexport class AttachCookieArgs {\n  instruction: number = 8;\n}\n\nexport class UpdatePositionArgs {\n  instruction: number = 9;\n  size: BN;\n  side: number;\n  seq: BN;\n\n  constructor(args: { size: number; side: number, seq: number }) {\n    this.size = new BN(args.size);\n    this.side = args.side;\n    this.seq = new BN(args.seq);\n  }\n}\n\nexport class SettlePositionArgs {\n  instruction: number = 10;\n}\n\nexport class NetworkTraderFeePayerArgs {\n  instruction: number = 11;\n}\n\nexport class WithdrawFeeArgs {\n  instruction: number = 12;\n  amount: BN;\n\n  constructor(args: { amount: number }) {\n    this.amount = new BN(args.amount);\n  }\n}\n\nexport class DestroyParimutuelArgs {\n  instruction: number = 15;\n}\n\nexport class DestroyPositionArgs {\n  instruction: number = 18;\n}\n\nexport class DestroyPositionEntryArgs {\n  instruction: number = 17;\n}\n","import {\n  NetworkArgs,\n  NetworkUpdateArgs,\n  MarketArgs,\n  StoreArgs,\n  ParimutuelArgs,\n  UpdatePriceArgs,\n  TraderAccountsArgs,\n  TraderPositionAccountArgs,\n  TraderSequenceNumberArgs,\n  AttachCookieArgs,\n  UpdatePositionArgs,\n  SettlePositionArgs,\n  NetworkTraderFeePayerArgs,\n  WithdrawFeeArgs,\n  DestroyParimutuelArgs,\n  DestroyPositionArgs,\n  DestroyPositionEntryArgs,\n} from './args';\n\nimport { FixedFees } from './FixedFees';\nimport { LinearFees } from './LinearFees';\nimport { MultiTieredFees } from \"./MultiTieredFees\";\nimport { TwoTieredFees } from './TwoTieredFees';\nimport { Network } from './Network';\nimport { Store } from './Store';\nimport { Market } from './Market';\nimport { Parimutuel } from './Parimutuel';\nimport { TraderAccount } from './TraderAccount';\nimport { TraderSequenceNumber } from './TraderSequenceNumber';\nimport { TraderPositionAccount } from './TraderPositionAccount';\nimport { TraderEntryAccount } from './TraderEntryAccount';\n\n// eslint-disable-next-line\nexport const schema = new Map<any, any>([\n  [\n    NetworkArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['fees', TwoTieredFees], // Supports both: LinearFees | TwoTieredFees\n      ],\n    },\n  ],\n  [\n    NetworkUpdateArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['fees', TwoTieredFees], // Supports both: LinearFees | TwoTieredFees\n      ],\n    },\n  ],\n  [\n    MarketArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['duration', 'u64'],\n        ['contractSize', 'u64'],\n        ['fees', FixedFees],\n      ],\n    },\n  ],\n  [\n    StoreArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['fees', FixedFees],\n      ],\n    },\n  ],\n  [\n    ParimutuelArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['marketOpen', 'u64'],\n        ['marketClose', 'u64'],\n        ['timeWindowStart', 'u64'],\n      ],\n    },\n  ],\n  [\n    UpdatePriceArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    TraderAccountsArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    TraderSequenceNumberArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    TraderPositionAccountArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    AttachCookieArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    UpdatePositionArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['size', 'u64'],\n        ['side', 'u8'],\n        ['seq', 'u64'],\n      ],\n    },\n  ],\n  [\n    SettlePositionArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    NetworkTraderFeePayerArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    WithdrawFeeArgs,\n    {\n      kind: 'struct',\n      fields: [\n        ['instruction', 'u8'],\n        ['amount', 'u64'],\n      ],\n    },\n  ],\n  [\n    DestroyParimutuelArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    DestroyPositionArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    DestroyPositionEntryArgs,\n    {\n      kind: 'struct',\n      fields: [['instruction', 'u8']],\n    },\n  ],\n  [\n    LinearFees,\n    {\n      kind: 'struct',\n      fields: [\n        ['enum', 'u8'],\n        ['version', 'u8'],\n        ['protocolTokenRequiredForMinFee', 'u64'],\n        ['minProtocolFeeBps', 'u16'],\n        ['maxProtocolFeeBps', 'u16'],\n        ['minSettlementFeeBps', 'u16'],\n        ['maxSettlementFeeBps', 'u16'],\n        ['_padding1', 'u8'],\n        ['_padding2', 'u16'],\n        ['_padding4', 'u32'],\n        ['_padding8', 'u64'],\n        ['_padding8_0', 'u64'],\n        ['_padding8_1', 'u64'],\n        ['_padding8_2', 'u64'],\n        ['_padding8_3', 'u64'],\n      ],\n    },\n  ],\n  [\n    TwoTieredFees,\n    {\n      kind: 'struct',\n      fields: [\n        ['enum', 'u8'],\n        ['version', 'u8'],\n        ['protocolTokenRequiredForMinFee', 'u64'],\n        ['minProtocolFeeBps', 'u16'],\n        ['maxProtocolFeeBps', 'u16'],\n        ['minSettlementFeeBps', 'u16'],\n        ['maxSettlementFeeBps', 'u16'],\n        ['_padding1', 'u8'],\n        ['_padding2', 'u16'],\n        ['_padding4', 'u32'],\n        ['_padding8', 'u64'],\n        ['_padding8_0', 'u64'],\n        ['_padding8_1', 'u64'],\n        ['_padding8_2', 'u64'],\n        ['_padding8_3', 'u64'],\n      ],\n    },\n  ],\n  [\n    FixedFees,\n    {\n      kind: 'struct',\n      fields: [\n        ['enum', 'u8'],\n        ['version', 'u8'],\n        ['protocolFeeBps', 'u16'],\n        ['settlementFeeBps', 'u16'],\n        ['_padding1', 'u8'],\n        ['_padding2', 'u16'],\n        ['_padding8', 'u64'],\n        ['_padding16', 'u128'],\n        ['_padding8_0', 'u64'],\n        ['_padding8_1', 'u64'],\n        ['_padding8_2', 'u64'],\n        ['_padding8_3', 'u64'],\n      ],\n    },\n  ],\n  [\n    MultiTieredFees,\n    {\n      kind: 'struct',\n      fields: [\n        ['enum', 'u8'],\n        ['version', 'u8'],\n        ['tiers', 'u8'],\n        ['stakedAmount', 'multiTieredFeesStakedAmount'],\n        ['settlementFeeBps', 'multiTieredFeesSettlementFeeBps'],\n        ['_padding1', 'u16'],\n      ],\n    },\n  ],\n  [\n    Network,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['authority', 'pubkeyAsString'],\n        ['protocolToken', 'pubkeyAsString'],\n        ['settlementToken', 'pubkeyAsString'],\n        ['protocolProductOracle', 'pubkeyAsString'],\n        ['protocolPriceOracle', 'pubkeyAsString'],\n        ['protocolFeeCollector', 'pubkeyAsString'],\n        ['settlementFeeCollector', 'pubkeyAsString'],\n        ['fee', LinearFees],\n      ],\n    },\n  ],\n  [\n    Market,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['authority', 'pubkeyAsString'],\n        ['network', 'pubkeyAsString'],\n        ['underlyingProductOracle', 'pubkeyAsString'],\n        ['underlyingPriceOracle', 'pubkeyAsString'],\n        ['duration', 'u64'],\n        ['contractSize', 'u64'],\n        ['protocolFeeCollector', 'pubkeyAsString'],\n        ['settlementFeeCollector', 'pubkeyAsString'],\n        ['fee', FixedFees],\n      ],\n    },\n  ],\n  [\n    Store,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['marketKey', 'pubkeyAsString'],\n        ['wallet', 'pubkeyAsString'],\n        ['protocolFeeCollector', 'pubkeyAsString'],\n        ['settlementFeeCollector', 'pubkeyAsString'],\n        ['fee', LinearFees],\n      ],\n    },\n  ],\n  [\n    Parimutuel,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['strike', 'u64'],\n        ['index', 'u64'],\n        ['slot', 'u64'],\n        ['marketOpen', 'u64'],\n        ['marketClose', 'u64'],\n        ['timeWindowStart', 'u64'],\n        ['marketKey', 'pubkeyAsString'],\n        ['honeypot', 'pubkeyAsString'],\n        ['numPositions', 'u64'],\n        ['numPositionsSettled', 'u64'],\n        ['numPositionsDestroyed', 'u64'],\n        ['expired', 'u8'],\n        ['rewardPerShare', 'u64'],\n        ['activeLongPositions', 'u64'],\n        ['activeShortPositions', 'u64'],\n        ['networkFees', TwoTieredFees],\n        ['marketFees', FixedFees],\n        ['creator', 'pubkeyAsString'],\n      ],\n    },\n  ],\n  [\n    TraderAccount,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['aggregationLevelKey', 'pubkeyAsString'],\n        ['profit', 'u64'],\n        ['loss', 'u64'],\n        ['wins', 'u64'],\n        ['losses', 'u64'],\n      ],\n    },\n  ],\n  [\n    TraderSequenceNumber,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['parimutuel', 'pubkeyAsString'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['sequenceNumber', 'u64'],\n      ],\n    },\n  ],\n  [\n    TraderPositionAccount,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['sequenceNumber', 'u64'],\n        ['parimutuel', 'pubkeyAsString'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['hasStore', 'u8'],\n        ['store', 'pubkeyAsString'],\n        ['longPosition', 'u64'],\n        ['shortPosition', 'u64'],\n        ['numEntries', 'u64'],\n        ['paid', 'u8'],\n        ['payout', 'u64'],\n      ],\n    },\n  ],\n  [\n    TraderEntryAccount,\n    {\n      kind: 'struct',\n      fields: [\n        ['version', 'u8'],\n        ['programId', 'pubkeyAsString'],\n        ['bumpSeed', 'u8'],\n        ['traderPosition', 'pubkeyAsString'],\n        ['sequenceNumber', 'u64'],\n        ['traderWallet', 'pubkeyAsString'],\n        ['direction', 'u8'],\n        ['amount', 'u64'],\n        ['timestamp', 'u64'],\n      ],\n    },\n  ],\n]);\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { AttachCookieArgs, schema } from '../borsh';\n\nexport const createAttachCookieInstruction = async (\n  programId: PublicKey,\n  settings: AttachCookieArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  storePubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { NetworkArgs, schema } from '../borsh';\n\nexport const createNetworkInstruction = async (\n  programId: PublicKey,\n  settings: NetworkArgs,\n  networkPubkey: PublicKey,\n  networkWalletPubkey: PublicKey,\n  payerPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  networkProtocolFeeCollectorPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: networkProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n\n\nexport const updateNetworkInstruction = async (\n  programId: PublicKey,\n  settings: NetworkArgs,\n  networkPubkey: PublicKey,\n  networkWalletPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  networkProtocolFeeCollectorPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<TransactionInstruction> => new TransactionInstruction({\n  keys: [\n    {\n      pubkey: networkPubkey,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: protocolMintPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: protocolProductOraclePubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: protocolPriceOraclePubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: settlementMintPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: networkWalletPubkey,\n      isSigner: true,\n      isWritable: false,\n    },\n    {\n      pubkey: networkProtocolFeeCollectorPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: networkSettlementFeeCollectorPubkey,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n  ],\n  programId,\n  data: Buffer.from(serialize(schema, settings)),\n});\n","import {\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { UpdatePriceArgs, schema } from '../borsh';\n\nexport const createUpdatePriceInstruction = async (\n  programId: PublicKey,\n  settings: UpdatePriceArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  parimutuelCreatorPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: parimutuelCreatorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { NetworkTraderFeePayerArgs, schema } from '../borsh';\n\nexport const createNetworkTraderFeePayerInstruction = async (\n  programId: PublicKey,\n  settings: NetworkTraderFeePayerArgs,\n  networkPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  networkTraderFeePayerPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderFeePayerPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { TraderAccountsArgs, schema } from '../borsh';\n\nexport const createTraderAccountInstruction = async (\n  programId: PublicKey,\n  settings: TraderAccountsArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  marketTraderAccountPubkey: PublicKey,\n  traderFeeStatePubkey: PublicKey,\n  reservePubkey: PublicKey,\n  incentiveProgramId: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: traderFeeStatePubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: reservePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: incentiveProgramId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { TraderPositionAccountArgs, schema } from '../borsh';\n\nexport const createTraderPositionAccountInstruction = async (\n  programId: PublicKey,\n  settings: TraderPositionAccountArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { ParimutuelArgs, schema } from '../borsh';\n\nexport const createParimutuelInstruction = async (\n  programId: PublicKey,\n  settings: ParimutuelArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { StoreArgs, schema } from '../borsh';\n\nexport const createStoreInstruction = async (\n  programId: PublicKey,\n  settings: StoreArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  storeWalletPubkey: PublicKey,\n  payerPubkey: PublicKey,\n  storePubkey: PublicKey,\n  storeProtocolFeeCollectorPubkey: PublicKey,\n  storeSettlementFeeCollectorPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storePubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: storeWalletPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SYSVAR_CLOCK_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { UpdatePositionArgs, schema } from '../borsh';\n\nexport const createPlacePositionInstruction = async (\n  programId: PublicKey,\n  settings: UpdatePositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  entryAccountPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: entryAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import {\n  SystemProgram,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { SettlePositionArgs, schema } from '../borsh';\n\nexport const createSettlePositionInstruction = async (\n  programId: PublicKey,\n  settings: SettlePositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  networkTraderFeePayerPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  marketSettlementFeeCollectorPubkey: PublicKey,\n  marketTraderAccountPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  parimutuelCreatorPubkey: PublicKey,\n  traderFeeState: PublicKey,\n  reserve: PublicKey,\n  incentiveSigner: PublicKey,\n  stakePool: PublicKey,\n  stakerState: PublicKey,\n  hxroMint: PublicKey,\n  eshxroMint: PublicKey,\n  lhxroMint: PublicKey,\n  incentiveProgramId: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: parimutuelCreatorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: true, // TODO\n      },\n      {\n        pubkey: traderFeeState,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: reserve,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: incentiveSigner,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderFeePayerPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: stakePool,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: stakerState,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: hxroMint,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: eshxroMint,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: lhxroMint,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: incentiveProgramId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { WithdrawFeeArgs, schema } from '../borsh';\n\nexport const createWithdrawFeeInstruction = async (\n  programId: PublicKey,\n  settings: WithdrawFeeArgs,\n  networkPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  networkTraderFeePayerPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderFeePayerPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\n\nimport { DestroyParimutuelArgs, schema } from '../borsh';\n\nexport const createDestroyParimutuelInstruction = async (\n  programId: PublicKey,\n  settings: DestroyParimutuelArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  parimutuelCreatorPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  settlementFeeCollector: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: parimutuelCreatorPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementFeeCollector,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { DestroyPositionEntryArgs, schema } from '../borsh';\n\nexport const createDestroyPositionEntryInstruction = async (\n  programId: PublicKey,\n  settings: DestroyPositionEntryArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  entryAccountPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: entryAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { DestroyPositionArgs, schema } from '../borsh';\n\nexport const createDestroyPositionInstruction = async (\n  programId: PublicKey,\n  settings: DestroyPositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { PublicKey } from '@solana/web3.js';\nimport { BinaryReader, BinaryWriter } from 'borsh';\nimport base58 from 'bs58';\n\nexport const extendBorsh = (): void => {\n  // eslint-disable-next-line\n  (BinaryReader.prototype as any).readPubkey = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return new PublicKey(array);\n  };\n\n  // eslint-disable-next-line\n  (BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(value.toBuffer());\n  };\n\n  // eslint-disable-next-line\n  (BinaryReader.prototype as any).readPubkeyAsString = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = reader.readFixedArray(32);\n    return base58.encode(array) as string;\n  };\n\n  // eslint-disable-next-line\n  (BinaryWriter.prototype as any).writePubkeyAsString = function (\n    value: string\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    writer.writeFixedArray(base58.decode(value));\n  };\n\n  // eslint-disable-next-line\n  (BinaryReader.prototype as any).readMultiTieredFeesStakedAmount = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = new Array<number>(10);\n    for (let i = 0; i < 10; i++) {\n      array[i] = reader.readU32();\n    }\n    return array;\n  };\n\n  // eslint-disable-next-line\n  (BinaryWriter.prototype as any).writeMultiTieredFeesStakedAmount = function (\n      value: Array<number>\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    for (let i = 0; i < 10; i++) {\n      writer.writeU32(value[i]);\n    }\n  };\n\n  // eslint-disable-next-line\n  (BinaryReader.prototype as any).readMultiTieredFeesSettlementFeeBps = function () {\n    const reader = this as unknown as BinaryReader;\n    const array = new Array<number>(10);\n    for (let i = 0; i < 10; i++) {\n      array[i] = reader.readU16();\n    }\n    return array;\n  };\n\n  // eslint-disable-next-line\n  (BinaryWriter.prototype as any).writeMultiTieredFeesSettlementFeeBps = function (\n      value: Array<number>\n  ) {\n    const writer = this as unknown as BinaryWriter;\n    for (let i = 0; i < 10; i++) {\n      writer.writeU16(value[i]);\n    }\n  };\n};\n","import { AccountInfo, PublicKey } from '@solana/web3.js';\nimport _get from 'lodash/get';\n\nimport { MIN_1, MIN_5, MIN_15, HR_1, DAY_1 } from '../constants';\nimport { Version } from '../borsh';\nimport {\n  MarketPairEnum,\n  MarketPubkey,\n  ParimutuelAccount,\n  MarketStatusEnum,\n} from '../types';\nimport { ParimutuelConfig } from '../web3';\n\nexport const getProtocolMint = (\n  config: ParimutuelConfig,\n  marketPair: MarketPairEnum\n): PublicKey => _get(config.markets, [marketPair, 'PROTOCOL_MINT']);\n\nexport const getSettlementMint = (\n  config: ParimutuelConfig,\n  marketPair: MarketPairEnum\n): PublicKey => _get(config.markets, [marketPair, 'SETTLEMENT_MINT']);\n\nexport const getMarketPubkeys = (\n  config: ParimutuelConfig,\n  marketPair: MarketPairEnum\n): MarketPubkey[] => {\n  const market = [];\n\n  if (_get(config.markets, [marketPair, 'MARKET_60S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_60S']),\n      duration: MIN_1,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_300S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_300S']),\n      duration: MIN_5,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_900S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_900S']),\n      duration: MIN_15,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_3600S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_3600S']),\n      duration: HR_1,\n    });\n  }\n\n  if (_get(config.markets, [marketPair, 'MARKET_86400S'])) {\n    market.push({\n      pubkey: _get(config.markets, [marketPair, 'MARKET_86400S']),\n      duration: DAY_1,\n    });\n  }\n\n  return market;\n};\n\nexport const isExpired = (parimutuel: ParimutuelAccount): boolean => {\n  const { expired } = parimutuel.info.parimutuel;\n  return Boolean(expired);\n};\n\nexport const isLong = (parimutuel: ParimutuelAccount): boolean => {\n  const { strike, index } = parimutuel.info.parimutuel;\n  return index.toNumber() > strike.toNumber();\n};\n\nexport const getMarketStatus = (\n  timeWindowStart: string,\n  marketClose: string,\n  duration: number\n): MarketStatusEnum => {\n  const currentTime = new Date().getTime();\n\n  if (currentTime >= Number(marketClose) + duration * 1000)\n    return MarketStatusEnum.SETTLED;\n\n  if (\n    currentTime >= Number(timeWindowStart) &&\n    currentTime < Number(marketClose) + duration * 1000 // TODO: remove duration\n  ) {\n    return MarketStatusEnum.LIVE;\n  }\n\n  return MarketStatusEnum.UPCOMING;\n};\n\nexport const isMarketAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.MarketV1;\n\nexport const isNetworkAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.NetworkV1;\n\nexport const isStoreAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.StoreV1;\n\nexport const isParimutuelAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.ParimutuelV1;\n\nexport const isTraderAccount = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.TraderAccountV1;\n\nexport const isTraderSequenceNumber = (account: AccountInfo<Buffer>): boolean =>\n  account.data[0] === Version.TraderSequenceNumberV1;\n\nexport const isTraderPositionAccount = (\n  account: AccountInfo<Buffer>\n): boolean => account.data[0] === Version.ParimutuelTraderPositionAccountV1;\n","export const PARIMUTUEL_SEED = 'parimutuel';\nexport const NETWORK_SEED = 'network';\nexport const MARKET_SEED = 'market';\nexport const STORE_SEED = 'store';\nexport const HONEYPOT_SEED = 'honeypot';\nexport const NETWORK_TRADER_ACCOUNT_SEED = 'network_trader_account';\nexport const NETWORK_FEE_PAYER_SEED = 'network_trader_fee_payer';\nexport const MARKET_TRADER_ACCOUNT_SEED = 'market_trader_account';\nexport const TRADER_POSITION_ACCOUNT_SEED = 'parimutuel_trader_position';\nexport const TRADER_ENTRY_ACCOUNT_SEED = 'parimutuel_trader_entry';\nexport const TRADER_SEQUENCE_SEED = 'trader_sequence';\nexport const RESERVE_ACCOUNT_SEED = 'parimutuel_reserve';\n\nexport const MIN_1 = 60;\nexport const MIN_5 = 300;\nexport const MIN_15 = 900;\nexport const HR_1 = 3600;\nexport const DAY_1 = 86400;\n\nexport const GET_MULTIPLE_ACCOUNTS_LIMIT = 99; // solana sdk limit\n","import { PublicKey } from '@solana/web3.js';\n\nimport { AddressInfo } from '../types';\n\nexport const notEmpty = <T>(value: T): value is NonNullable<typeof value> =>\n  !!value;\n\nexport const findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey\n): Promise<AddressInfo> => {\n  const key =\n    'pda-' +\n    seeds.reduce((acc, value) => acc + value.toString('hex'), '') +\n    programId.toString();\n\n  if (typeof window !== 'undefined') {\n    const cached = localStorage?.getItem(key);\n    if (cached) {\n      const value = JSON.parse(cached);\n      return [value.key, parseInt(value.nonce)] as [string, number];\n    }\n  }\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  if (typeof window !== 'undefined') {\n    localStorage?.setItem(\n      key,\n      JSON.stringify({\n        key: result[0].toBase58(),\n        nonce: result[1],\n      })\n    );\n  }\n\n  return [result[0].toBase58(), result[1]];\n};\n","import { PublicKey } from '@solana/web3.js';\nimport {\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n} from '@solana/spl-token';\nimport BN from 'bn.js';\n\nimport {\n    NETWORK_SEED,\n    MARKET_SEED,\n    PARIMUTUEL_SEED,\n    MARKET_TRADER_ACCOUNT_SEED,\n    NETWORK_TRADER_ACCOUNT_SEED,\n    HONEYPOT_SEED,\n    TRADER_POSITION_ACCOUNT_SEED,\n    TRADER_ENTRY_ACCOUNT_SEED,\n    NETWORK_FEE_PAYER_SEED,\n    TRADER_SEQUENCE_SEED,\n    STORE_SEED, RESERVE_ACCOUNT_SEED,\n} from '../constants';\nimport { findProgramAddress } from '../utils/utils';\n\nexport const findNetworkPubkey = async (\n  programId: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [Buffer.from(NETWORK_SEED), new Uint8Array(programId.toBuffer())],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketPubkey = async (\n  programId: PublicKey,\n  underlyingProductOraclePubkey: PublicKey,\n  underlyingPriceOraclePubkey: PublicKey,\n  protocolFeeCollectorPubkey: PublicKey,\n  settlementFeeCollectorPubkey: PublicKey,\n  duration: number,\n  contractSize: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(MARKET_SEED),\n      underlyingProductOraclePubkey.toBuffer(),\n      underlyingPriceOraclePubkey.toBuffer(),\n      protocolFeeCollectorPubkey.toBuffer(),\n      settlementFeeCollectorPubkey.toBuffer(),\n      new BN(duration).toBuffer(),\n      new BN(contractSize).toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findParimutuelPubkey = async (\n  programId: PublicKey,\n  marketPubKey: PublicKey,\n  marketOpen: number,\n  timeWindowStart: number,\n  marketClose: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(PARIMUTUEL_SEED),\n      marketPubKey.toBuffer(),\n      new Uint8Array(new BN(marketOpen).toArray('le', 8)),\n      new Uint8Array(new BN(marketClose).toArray('le', 8)),\n      new Uint8Array(new BN(timeWindowStart).toArray('le', 8)),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkProtocolFeeCollectorPubkey = async (\n  networkWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      networkWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      protocolMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkSettlementFeeCollectorPubkey = async (\n  networkWalletPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      networkWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      settlementMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketProtocolFeeCollectorPubkey = async (\n  marketWalletPubkey: PublicKey,\n  protocolMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      marketWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      protocolMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketSettlementFeeCollectorPubkey = async (\n  marketWalletPubkey: PublicKey,\n  settlementMintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      marketWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      settlementMintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findAssociatedTokenAccountPubkey = async (\n  userWalletPubkey: PublicKey,\n  mintPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      userWalletPubkey.toBuffer(),\n      TOKEN_PROGRAM_ID.toBuffer(),\n      mintPubkey.toBuffer(),\n    ],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkTraderAccountPubkey = async (\n  programId: PublicKey,\n  userWalletPubkey: PublicKey,\n  networkPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(NETWORK_TRADER_ACCOUNT_SEED),\n      networkPubkey.toBuffer(),\n      userWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findMarketTraderAccountPubkey = async (\n  programId: PublicKey,\n  userWalletPubkey: PublicKey,\n  marketPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(MARKET_TRADER_ACCOUNT_SEED),\n      marketPubkey.toBuffer(),\n      userWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findTraderFeeStatePubkey = async (\n    incentiveProgramId: PublicKey,\n    userWalletPubkey: PublicKey,\n    networkPubkey: PublicKey,\n    reserve: PublicKey,\n): Promise<PublicKey> => {\n    const [pubkey] = await findProgramAddress(\n        [\n            networkPubkey.toBuffer(),\n            userWalletPubkey.toBuffer(),\n            reserve.toBuffer(),\n        ],\n        incentiveProgramId\n    );\n\n    return new PublicKey(pubkey);\n};\nexport const findReservePubkey = async (\n    incentiveProgramId: PublicKey,\n    networkPubkey: PublicKey,\n): Promise<PublicKey> => {\n    const [pubkey] = await findProgramAddress(\n        [\n            Buffer.from(RESERVE_ACCOUNT_SEED),\n            networkPubkey.toBuffer(),\n        ],\n        incentiveProgramId\n    );\n\n    return new PublicKey(pubkey);\n};\n\nexport const findIncentiveSignerPubkey = async (\n    programId: PublicKey,\n    networkPubkey: PublicKey,\n): Promise<PublicKey> => {\n    const [pubkey] = await findProgramAddress(\n        [\n            networkPubkey.toBuffer(),\n        ],\n        programId\n    );\n\n    return new PublicKey(pubkey);\n};\n\nexport const findStakerStatePubkey = async (\n    stakingProgramId: PublicKey,\n    userWalletPubkey: PublicKey,\n    stakePool: PublicKey,\n): Promise<PublicKey> => {\n    const [pubkey] = await findProgramAddress(\n        [\n            userWalletPubkey.toBuffer(),\n            stakePool.toBuffer(),\n        ],\n        stakingProgramId\n    );\n\n    return new PublicKey(pubkey);\n};\n\nexport const findHoneypotPubkey = async (\n  programId: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [Buffer.from(HONEYPOT_SEED), parimutuelPubkey.toBuffer()],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findTraderPositionAccountPubkey = async (\n  programId: PublicKey,\n  userWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(TRADER_POSITION_ACCOUNT_SEED),\n      parimutuelPubkey.toBuffer(),\n      userWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findEntryAccountPubkey = async (\n  programId: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  sequenceNumber: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(TRADER_ENTRY_ACCOUNT_SEED),\n      traderPositionAccountPubkey.toBuffer(),\n      new Uint8Array(new BN(sequenceNumber).toArray('le', 8)),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findNetworkTraderFeePayerPubkey = async (\n  programId: PublicKey,\n  networkTraderAccountPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(NETWORK_FEE_PAYER_SEED),\n      networkTraderAccountPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findTraderSequenceNumberPubkey = async (\n  programId: PublicKey,\n  parimutuelPubkey: PublicKey,\n  sequenceNumber: number\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(TRADER_SEQUENCE_SEED),\n      parimutuelPubkey.toBuffer(),\n      new Uint8Array(new BN(sequenceNumber).toArray('le', 8)),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n\nexport const findStorePubkey = async (\n  programId: PublicKey,\n  marketPubkey: PublicKey,\n  storeWalletPubkey: PublicKey\n): Promise<PublicKey> => {\n  const [pubkey] = await findProgramAddress(\n    [\n      Buffer.from(STORE_SEED),\n      marketPubkey.toBuffer(),\n      storeWalletPubkey.toBuffer(),\n    ],\n    programId\n  );\n\n  return new PublicKey(pubkey);\n};\n","import { AccountInfo, Connection, PublicKey } from '@solana/web3.js';\nimport _chunk from 'lodash/chunk';\n\nimport { Accounts } from '../types';\nimport { GET_MULTIPLE_ACCOUNTS_LIMIT } from '../constants';\n\nconst getMultipleAccountsCore = async (\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<Accounts> => {\n  const args = [pubkeys.map((key) => key.toBase58()), { commitment: 'recent' }];\n  // @ts-ignore\n  const res = await connection._rpcRequest('getMultipleAccounts', args);\n  if (res.error) {\n    throw new Error(\n      'failed to get info about accounts ' +\n        pubkeys.map((key) => key.toBase58()).join(', ') +\n        ': ' +\n        res.error.message\n    );\n  }\n  if (!res.result) return [];\n\n  const accounts: Array<null | AccountInfo<Buffer>> = res.result.value.map(\n    // eslint-disable-next-line\n    (account: AccountInfo<any>) => {\n      if (!account) return null;\n\n      const { executable, owner, lamports, data } = account;\n\n      return {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n  );\n\n  return accounts.map((account, idx) => {\n    if (account === null) {\n      return null;\n    }\n    return {\n      pubkey: pubkeys[idx],\n      account,\n    };\n  });\n};\n\nexport const getMultipleAccounts = async (\n  connection: Connection,\n  pubkeys: PublicKey[]\n): Promise<Accounts> => {\n  if (pubkeys.length <= GET_MULTIPLE_ACCOUNTS_LIMIT) {\n    const result = await getMultipleAccountsCore(connection, pubkeys);\n    return result;\n  } else {\n    const batches = _chunk(pubkeys, GET_MULTIPLE_ACCOUNTS_LIMIT);\n    const results = await Promise.all<Accounts>(\n      batches.map((batch) => getMultipleAccountsCore(connection, batch))\n    );\n    return results.flat();\n  }\n};\n","import moment from 'moment';\nimport { ParimutuelTime } from '../types';\n\nexport const getHistoricalTimes = (\n  marketPubkey: string,\n  duration: number,\n  number: number\n): ParimutuelTime[] => {\n  const currentTime = new Date().getTime();\n  const elapsed = currentTime % duration;\n  const startTime = currentTime - elapsed;\n\n  const times: ParimutuelTime[] = Array.from(Array(number).keys()).map(\n    (num) => {\n      return { marketPubkey, startTime: startTime - num * duration, duration };\n    }\n  );\n\n  return times.reverse();\n};\n\nexport const getUpcomingTimes = (\n  marketPubkey: string,\n  duration: number,\n  number: number\n): ParimutuelTime[] => {\n  const currentTime = new Date().getTime();\n  const elapsed = currentTime % duration;\n  const startTime = currentTime - elapsed;\n\n  const times: ParimutuelTime[] = Array.from(Array(number).keys()).map(\n    (num) => {\n      return { marketPubkey, startTime: startTime + num * duration, duration };\n    }\n  );\n\n  return times.reverse();\n};\n\nexport const formatDuration = (duration: number): string => {\n  const hours = Math.floor(duration / (60 * 60));\n  const minutes = Math.floor((duration / 60) % 60);\n  const seconds = Math.floor(duration % 60);\n\n  if (hours === 24) return '1 day';\n  if (hours === 1) return '1 hour';\n  if (minutes === 15) return '15 min';\n  if (minutes === 5) return '5 min';\n  if (seconds === 60) return '1 min';\n  return '1 MIN';\n};\n\nexport const formatTime = (unixTime: number): string =>\n  moment.unix(unixTime / 1000).format('MM/DD/YYYY hh:mm:ss');\n\nexport const formatDate = (unixTime: number): string =>\n  moment.unix(unixTime / 1000).format('MM/DD/YYYY');\n\nexport const formatHour = (unixTime: number): string =>\n  moment.unix(unixTime / 1000).format('hh:mm:ss');\n","import {\n  schema,\n  FixedFees,\n  LinearFees,\n  MultiTieredFees,\n  Network,\n  Store,\n  Market,\n  Parimutuel,\n  TraderAccount,\n  TraderSequenceNumber,\n  TraderPositionAccount,\n  TraderEntryAccount,\n} from '../borsh';\nimport { PublicKey } from '@solana/web3.js';\nimport {\n  AccountLayout,\n  AccountInfo,\n  MintInfo,\n  MintLayout,\n  u64,\n} from '@solana/spl-token';\nimport { deserializeUnchecked } from 'borsh';\n\nimport { extendBorsh } from './borsh'; // need to extend borsh custom reader and writer\n\nextendBorsh();\n\nexport const decodeAccount = (data: Buffer): AccountInfo => {\n  const accountInfo = AccountLayout.decode(data);\n  accountInfo.mint = new PublicKey(accountInfo.mint);\n  accountInfo.owner = new PublicKey(accountInfo.owner);\n  accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n  if (accountInfo.delegateOption === 0) {\n    accountInfo.delegate = null;\n    accountInfo.delegatedAmount = new u64(0);\n  } else {\n    accountInfo.delegate = new PublicKey(accountInfo.delegate);\n    accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n  }\n\n  accountInfo.isInitialized = accountInfo.state !== 0;\n  accountInfo.isFrozen = accountInfo.state === 2;\n\n  if (accountInfo.isNativeOption === 1) {\n    accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n    accountInfo.isNative = true;\n  } else {\n    accountInfo.rentExemptReserve = null;\n    accountInfo.isNative = false;\n  }\n\n  if (accountInfo.closeAuthorityOption === 0) {\n    accountInfo.closeAuthority = null;\n  } else {\n    accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n  }\n\n  return accountInfo;\n};\n\nexport const decodeMint = (data: Buffer): MintInfo => {\n  if (data.length !== MintLayout.span) {\n    throw new Error('Not a valid Mint');\n  }\n\n  const mintInfo = MintLayout.decode(data);\n\n  if (mintInfo.mintAuthorityOption === 0) {\n    mintInfo.mintAuthority = null;\n  } else {\n    mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n  }\n\n  mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n  mintInfo.isInitialized = mintInfo.isInitialized !== 0;\n\n  if (mintInfo.freezeAuthorityOption === 0) {\n    mintInfo.freezeAuthority = null;\n  } else {\n    mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n  }\n\n  return mintInfo;\n};\n\nexport const decodeFixedFees = (buffer: Buffer): FixedFees =>\n  deserializeUnchecked(schema, FixedFees, buffer);\n\nexport const decodeLinearFees = (buffer: Buffer): LinearFees =>\n  deserializeUnchecked(schema, LinearFees, buffer);\n\nexport const decodeMultiTieredFees = (buffer: Buffer): MultiTieredFees =>\n    deserializeUnchecked(schema, MultiTieredFees, buffer);\n\nexport const decodeNetwork = (buffer: Buffer): Network => {\n  return deserializeUnchecked(schema, Network, buffer);\n};\n\nexport const decodeStore = (buffer: Buffer): Store => {\n  return deserializeUnchecked(schema, Store, buffer);\n};\n\nexport const decodeMarket = (buffer: Buffer): Market => {\n  return deserializeUnchecked(schema, Market, buffer);\n};\n\nexport const decodeParimutuel = (buffer: Buffer): Parimutuel => {\n  return deserializeUnchecked(schema, Parimutuel, buffer);\n};\n\nexport const decodeTraderAccount = (buffer: Buffer): TraderAccount => {\n  return deserializeUnchecked(schema, TraderAccount, buffer);\n};\n\nexport const decodeTraderSequenceNumber = (\n  buffer: Buffer\n): TraderSequenceNumber => {\n  return deserializeUnchecked(schema, TraderSequenceNumber, buffer);\n};\n\nexport const decodeTraderPositionAccount = (\n  buffer: Buffer\n): TraderPositionAccount => {\n  return deserializeUnchecked(schema, TraderPositionAccount, buffer);\n};\n\nexport const decodeTraderEntryAccount = (\n  buffer: Buffer\n): TraderEntryAccount => {\n  return deserializeUnchecked(schema, TraderEntryAccount, buffer);\n};\n","/* eslint-disable no-console */\nimport {\n  Keypair,\n  Commitment,\n  Connection,\n  SignatureStatus,\n  SimulatedTransactionResponse,\n  Transaction,\n  TransactionInstruction,\n  TransactionSignature,\n  Blockhash,\n  FeeCalculator,\n  RpcResponseAndContext,\n} from '@solana/web3.js';\nimport { WalletSigner } from '../types';\n\ninterface BlockhashAndFeeCalculator {\n  blockhash: Blockhash;\n  feeCalculator: FeeCalculator;\n}\n\nexport type TransactionState = {\n  transactionId: string;\n  slot: number;\n};\n\nconst DEFAULT_TIMEOUT = 15000;\n\nexport const getUnixTs = (): number => {\n  return new Date().getTime() / 1000;\n};\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\nconst simulateTransaction = async (\n  connection: Connection,\n  transaction: Transaction,\n  commitment: Commitment\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> => {\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash()\n  ).blockhash;\n\n  const signData = transaction.serializeMessage();\n  // @ts-ignore\n  const wireTransaction = transaction._serialize(signData);\n  const encodedTransaction = wireTransaction.toString('base64');\n  const config: any = { encoding: 'base64', commitment }; // eslint-disable-line\n  const args = [encodedTransaction, config];\n\n  // @ts-ignore\n  const res = await connection._rpcRequest('simulateTransaction', args);\n  if (res.error) {\n    throw new Error('failed to simulate transaction: ' + res.error.message);\n  }\n  return res.result;\n};\n\nconst awaitTransactionSignatureConfirmation = async (\n  transactionId: TransactionSignature,\n  timeout: number,\n  connection: Connection\n): Promise<SignatureStatus | null | void> => {\n  let done = false;\n  let status: SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n\n  // eslint-disable-next-line\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Timed out for txid', transactionId);\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        transactionId,\n        (result, context) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log('Rejected via websocket', result.err);\n            reject(status);\n          } else {\n            console.log('Resolved via websocket', result);\n            resolve(status);\n          }\n        },\n        'recent'\n      );\n    } catch (e) {\n      done = true;\n      console.error('WS error in setup', transactionId, e);\n    }\n\n    while (!done) {\n      // eslint-disable-next-line\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            transactionId,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          console.log(\n            `https://explorer.solana.com/tx/${transactionId}?cluster=devnet`\n          );\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', transactionId, status);\n            } else if (status.err) {\n              console.log('REST error for', transactionId, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', transactionId, status);\n            } else {\n              console.log('REST confirmation for', transactionId, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (err) {\n          if (!done) {\n            console.log(\n              'REST connection error: transactionId',\n              transactionId,\n              err\n            );\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions?.[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nexport const sendSignedTransaction = async ({\n  connection,\n  signedTransaction,\n  retry = true,\n  timeout = DEFAULT_TIMEOUT,\n  confirmation = true,\n}: {\n  signedTransaction: Transaction;\n  connection: Connection;\n  sendingMessage?: string;\n  sentMessage?: string;\n  successMessage?: string;\n  retry?: boolean;\n  timeout?: number;\n  confirmation?: boolean;\n}): Promise<TransactionState> => {\n  const rawTransaction = signedTransaction.serialize();\n  const startTime = getUnixTs();\n  let slot = 0;\n  const transactionId = await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight: true,\n  });\n\n  let done = false;\n\n  if (retry) {\n    (async () => {\n      while (!done && getUnixTs() - startTime < timeout) {\n        connection\n          .sendRawTransaction(rawTransaction, {\n            skipPreflight: true,\n          })\n          .catch((error) => console.error(error));\n        await sleep(500);\n      }\n    })();\n  } else {\n    connection\n      .sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      })\n      .catch((error) => console.error(error));\n  }\n\n  if (confirmation) {\n    try {\n      console.log('Started awaiting confirmation for', transactionId);\n\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        transactionId,\n        timeout,\n        connection\n      );\n\n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n\n      if (confirmation.err) {\n        console.error(confirmation.err);\n        throw new Error('Transaction failed: Custom instruction error');\n      }\n\n      slot = confirmation?.slot || 0;\n    } catch (err) {\n      console.error('Timeout Error caught', err);\n      // eslint-disable-next-line\n      if ((err as any).timeout) {\n        throw new Error('Timed out awaiting confirmation on transaction');\n      }\n\n      let simulateResult: SimulatedTransactionResponse | null = null;\n      try {\n        simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n        ).value;\n      } catch (err) {\n        console.error('simulate error', err);\n      }\n\n      if (simulateResult && simulateResult.err) {\n        if (simulateResult.logs) {\n          for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n            const line = simulateResult.logs[i];\n            if (line.startsWith('Program log: ')) {\n              throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length)\n              );\n            }\n          }\n        }\n        throw new Error(JSON.stringify(simulateResult.err));\n      }\n      throw new Error('Transaction failed');\n    } finally {\n      done = true;\n    }\n\n    console.log('Latency', transactionId, getUnixTs() - startTime);\n  }\n\n  return { transactionId, slot };\n};\n\nexport const sendTransaction = async (\n  connection: Connection,\n  userWallet: WalletSigner,\n  instructions: TransactionInstruction[],\n  signers: Keypair[],\n  commitment: Commitment = 'singleGossip',\n  includesFeePayer: boolean = false,\n  retry: boolean = true,\n  confirmation: boolean = true,\n  block?: BlockhashAndFeeCalculator,\n  beforeSend?: () => void\n): Promise<TransactionState | undefined> => {\n  if (!userWallet.publicKey) throw new Error('wallet is not connected');\n\n  let transaction = new Transaction();\n  instructions.forEach((instruction) => transaction.add(instruction));\n  transaction.recentBlockhash = (\n    block || (await connection.getRecentBlockhash(commitment))\n  ).blockhash;\n\n  if (includesFeePayer) {\n    transaction.setSigners(...signers.map((s) => s.publicKey));\n  } else {\n    transaction.setSigners(\n      // fee payed by the wallet owner\n      userWallet.publicKey,\n      ...signers.map((s) => s.publicKey)\n    );\n  }\n\n  if (signers.length > 0) {\n    transaction.partialSign(...signers);\n  }\n\n  if (!includesFeePayer) {\n    transaction = await userWallet.signTransaction(transaction);\n  }\n\n  if (beforeSend) {\n    beforeSend();\n  }\n\n  try {\n    const { transactionId, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n      retry,\n      confirmation,\n    });\n\n    return { transactionId, slot };\n  } catch (error) {\n    console.error(error);\n    return undefined;\n  }\n};\n","import { PublicKey } from '@solana/web3.js';\n\nimport { MarketPairEnum } from '../types/enum';\n\nexport enum ConfigEnum {\n  DEV = 'dev',\n  STAGING = 'staging',\n  CUSTOM = 'custom',\n}\n\nexport type MarketConfig = {\n  [key: string]: PublicKey; // ex: MARKET_60S: PublicKey;\n};\n\nexport type OracleConfig = {\n  HXRO_USD_ORACLE: PublicKey;\n  HXRO_PRICE_ORACLE: PublicKey;\n  SOL_USD_ORACLE: PublicKey;\n  SOL_PRICE_ORACLE: PublicKey;\n  BTC_USD_ORACLE: PublicKey;\n  BTC_PRICE_ORACLE: PublicKey;\n  ETH_USD_ORACLE: PublicKey;\n  ETH_PRICE_ORACLE: PublicKey;\n};\n\nexport type ParimutuelConfig = {\n  SOLANA_CLUSTER_URL?: string;\n  PARIMUTUEL_PROGRAM_ID: PublicKey;\n  INCENTIVE_PROGRAM_ID: PublicKey;\n  STAKING_PROGRAM_ID: PublicKey;\n  NETWORK: PublicKey;\n  NETWORK_PROTOCOL_FEE_COLLECTOR?: PublicKey;\n  MARKET_PROTOCOL_FEE_COLLECTOR?: PublicKey;\n  HXRO_MINT: PublicKey;\n  ESHXRO_MINT: PublicKey;\n  LHXRO_MINT: PublicKey;\n  USDC_MINT: PublicKey;\n  BONK_MINT: PublicKey;\n  STAKE_POOL: PublicKey;\n  oracles: OracleConfig;\n  markets: {\n    [MarketPairEnum.SOLUSD]: MarketConfig;\n    [MarketPairEnum.BTCUSD]: MarketConfig;\n    [MarketPairEnum.ETHUSD]: MarketConfig;\n  };\n};\n\nexport const DEV_CONFIG: ParimutuelConfig = {\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n      '3kjK4HA6A4K86NgNB93gGhSt257wtN4QAqXMNPQ4fVTm'\n  ),\n  INCENTIVE_PROGRAM_ID: new PublicKey(\n      '5u8mLVnUSQNSbKdZPNGTfWHGwV5uJh9by5Fa6jb6BP6h'\n  ),\n  STAKING_PROGRAM_ID: new PublicKey(\n      '2jmux3fWV5zHirkEZCoSMEgTgdYZqkE9Qx2oQnxoHRgA'\n  ),\n  NETWORK: new PublicKey('2xJcpMZvegKZ6GCYzUp74DfEFtPss66XNzV932xgSgNW'),\n  NETWORK_PROTOCOL_FEE_COLLECTOR: new PublicKey(\n      '3QxkXnrh7EHYwQp7s6x7t5nJidyGVC7mVNFwGpy6FV5F'\n  ),\n  MARKET_PROTOCOL_FEE_COLLECTOR: new PublicKey(\n      'Fcbzf2591V4rWw83yLUjkA646F2twxzLeZinbbSMYece'\n  ),\n  HXRO_MINT: new PublicKey('265iYi4pVmorRzrq3X7Eudy6uCKMeDxXiTDkh92vARTE'),\n  ESHXRO_MINT: new PublicKey(\n      '8Gbc9RqfTsQ8WUWcAmwwU8hiKRxhmvvNXbiFmsraSgPr'\n  ),\n  LHXRO_MINT: new PublicKey(\n      '6rLF29hK8dQe6ZeZws16sKMG5AXuNzTwnBtbCFt6DSBN'\n  ),\n  USDC_MINT: new PublicKey('DXSVQJqJbNTTcGqCkfHnQYXwG5GhZsfg2Ka9tNkK3ohr'),\n  BONK_MINT: new PublicKey('bonkKjzREa7pVBRD6nFPAKRaHhS7XpDhhgZCZdGNkuU'),\n  STAKE_POOL: new PublicKey('9zdpqAgENj4734TQvqjczMg2ekvvuGsxwJC6f7F1QWp4'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n        '6C4PJ4bMuLFmvHRqSkmGeyoSGAKMfPG1um1k1suryfs'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n        '6VrSw4Vxg5zs9shfdCxLqfUy2qSD3NCS9AsdBQUgbjnt'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n        '3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n        'J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n        '3m1y5h2uv7EQL3KaJZehvAJa4yDNvgc5yAdL9KPMKwvk'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n        'HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n        '2ciUuGZiee5macAMeQ7bHGTJtwcYTgnt6jdmQnnKZrfu'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n        'EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw'\n    ),\n  },\n  markets: {\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('FBaFPMJZ9UPHwrbCYLytuSpA15u3pY9cKjJQ4z5Ag59q'),\n      MARKET_300S: new PublicKey(\n          'AySG6K4cNHvy3YpHFb1JcmmEhBfLfCzYgNXqpdfgbQoE'\n      ),\n      MARKET_900S: new PublicKey(\n          'HzLNwHEMH3aAY9F8gRAdJEfe2J3opdxr1mDPt8AuLEkh'\n      ),\n      MARKET_3600S: new PublicKey(\n          'BqJAZHr56t14QABZLygZYWe7WozVSVPLQb6yDSj9f8U1'\n      ),\n      MARKET_86400S: new PublicKey(\n          '2MMLwY7VaDTS3ZSd1ZkmzCQxrJWjxmWgEXLPEA3nm9Pz'\n      ),\n    },\n    [MarketPairEnum.BTCUSD]: {\n      MARKET_60S: new PublicKey('2J8yR9G1yXebijHYuRFe4iWQfKxYt8LLGN2mfxKCLWWM'),\n      MARKET_300S: new PublicKey(\n          '8WiZ4VTsq8fG92osksPbrc5E3raeL839D83Q8pxuXH8m'\n      ),\n      MARKET_900S: new PublicKey(\n          '79omw4hStqWfPnQXPinEF2yDFFakjvXanwMZZ7YYFL94'\n      ),\n      MARKET_3600S: new PublicKey(\n          '7hbU86BtQUkZUw8jJpqgaRgp1Wyxgp2LSTyY1oSoznvP'\n      ),\n      MARKET_86400S: new PublicKey(\n          'HjdzuJ5LhiLJLKaR4sCCHj3FwmkWEHNXpGVEPUTPFRtx'\n      ),\n    },\n    [MarketPairEnum.ETHUSD]: {\n      MARKET_60S: new PublicKey('CX9JDCAut5ShXYdQFAX9oSo93wmi86Xkb7SgagsgkXmM'),\n      MARKET_300S: new PublicKey(\n          'F35oVkVWKSYHqaw66U1PHgZtmPeJMcTArEPvX3PCukTH'\n      ),\n      MARKET_900S: new PublicKey(\n          'BRDqHv4enme3piwh228yyVk1sBuxa8Q7mgwq7SYwsPfA'\n      ),\n      MARKET_3600S: new PublicKey(\n          '7MDcHRxHhTdDmhCMRVC9hgb29CFMbTTG5jT3thpqqqJK'\n      ),\n      MARKET_86400S: new PublicKey(\n          '8kw8BAWcgm78PMmHsKoXUGKZXnUPZUaXCw8SdrRAjJ3E'\n      ),\n    },\n  },\n};\n\nexport const DEV_BONK_CONFIG: ParimutuelConfig = {\n  MARKET_PROTOCOL_FEE_COLLECTOR: undefined, NETWORK_PROTOCOL_FEE_COLLECTOR: undefined, SOLANA_CLUSTER_URL: \"https://api.devnet.solana.com\",\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n      '3kjK4HA6A4K86NgNB93gGhSt257wtN4QAqXMNPQ4fVTm'\n  ),\n  INCENTIVE_PROGRAM_ID: new PublicKey(\n      '5u8mLVnUSQNSbKdZPNGTfWHGwV5uJh9by5Fa6jb6BP6h'\n  ),\n  STAKING_PROGRAM_ID: new PublicKey(\n      '2jmux3fWV5zHirkEZCoSMEgTgdYZqkE9Qx2oQnxoHRgA'\n  ),\n  NETWORK: new PublicKey('5QW1YiTeLWft63Y4LCXfKCzQUDApzpJWeQh6gqXT8Mf1'),\n  HXRO_MINT: new PublicKey('265iYi4pVmorRzrq3X7Eudy6uCKMeDxXiTDkh92vARTE'),\n  ESHXRO_MINT: new PublicKey(\n      '8Gbc9RqfTsQ8WUWcAmwwU8hiKRxhmvvNXbiFmsraSgPr'\n  ),\n  LHXRO_MINT: new PublicKey(\n      '6rLF29hK8dQe6ZeZws16sKMG5AXuNzTwnBtbCFt6DSBN'\n  ),\n  USDC_MINT: new PublicKey('DXSVQJqJbNTTcGqCkfHnQYXwG5GhZsfg2Ka9tNkK3ohr'),\n  BONK_MINT: new PublicKey('bonkKjzREa7pVBRD6nFPAKRaHhS7XpDhhgZCZdGNkuU'),\n  STAKE_POOL: new PublicKey('9zdpqAgENj4734TQvqjczMg2ekvvuGsxwJC6f7F1QWp4'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n        '6C4PJ4bMuLFmvHRqSkmGeyoSGAKMfPG1um1k1suryfs'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n        '6VrSw4Vxg5zs9shfdCxLqfUy2qSD3NCS9AsdBQUgbjnt'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n        '3Mnn2fX6rQyUsyELYms1sBJyChWofzSNRoqYzvgMVz5E'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n        'J83w4HKfqxwcq3BEMMkPFSppX3gqekLyLJBexebFVkix'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n        '3m1y5h2uv7EQL3KaJZehvAJa4yDNvgc5yAdL9KPMKwvk'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n        'HovQMDrbAgAYPCmHVSrezcSmkMtXSSUsLDFANExrZh2J'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n        '2ciUuGZiee5macAMeQ7bHGTJtwcYTgnt6jdmQnnKZrfu'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n        'EdVCmQ9FSPcVe5YySXDPCRmc8aDQLKJ9xvYBMZPie1Vw'\n    ),\n  },\n  markets:{\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('DeQFZzcWkEUeYju6GoizSbZotynYdB4XfkNgf21LtZjs'),\n    },\n    [MarketPairEnum.BTCUSD]: {\n      MARKET_60S: new PublicKey('BswfdHHVnYRMQmDMYNcMF89tWfnQcCwtraCNDgnv8sVE'),\n    },\n    [MarketPairEnum.ETHUSD]: {}\n  }\n};\n\nexport const STAGING_BONK_CONFIG: ParimutuelConfig = {\n  MARKET_PROTOCOL_FEE_COLLECTOR: undefined, NETWORK_PROTOCOL_FEE_COLLECTOR: undefined, SOLANA_CLUSTER_URL: \"https://api.mainnet-beta.solana.com\",\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n    'GUhB2ohrfqWspztgCrQpAmeVFBWmnWYhPcZuwY52WWRe'\n  ),\n  INCENTIVE_PROGRAM_ID: new PublicKey(\n      '5u8mLVnUSQNSbKdZPNGTfWHGwV5uJh9by5Fa6jb6BP6h'\n  ),\n  STAKING_PROGRAM_ID: new PublicKey(\n      '2jmux3fWV5zHirkEZCoSMEgTgdYZqkE9Qx2oQnxoHRgA'\n  ),\n  NETWORK: new PublicKey('AARaFgaGwAoZAGqwf8Kn5aqxpZvuDotMMH6HgckJpCC7'),\n  HXRO_MINT: new PublicKey('HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK'),\n  ESHXRO_MINT: new PublicKey(\n      'CPwspzHc4bKtBQGNRhpRG9v3qRiPLWP28GrfZepwmBSz'\n  ),\n  LHXRO_MINT: new PublicKey(\n      '36VFoo1rQ7a1w45jBwHmr2sodnUUhRtL7K6fsx2tuMwb'\n  ),\n  USDC_MINT: new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'),\n  BONK_MINT: new PublicKey('DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263'),\n  STAKE_POOL: new PublicKey('9zdpqAgENj4734TQvqjczMg2ekvvuGsxwJC6f7F1QWp4'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n      'BJqTdFytBhGWpq183a5EPo123cB6gitTAmSSsCta3RGG'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n      'B47CC1ULLw1jKTSsr1N1198zrUHp3LPduzepJyzgLn2g'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n      'ALP8SdU9oARYVLgLR7LrqMNCYBnhtnQz1cj6bwgwQmgj'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n      'H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n      '4aDoSXJ5o3AuvL7QFeR6h44jALQfTmUUCTVGDD6aoJTM'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n      'GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n      'EMkxjGC1CQ7JLiutDbfYb7UKb3zm9SJcUmr1YicBsdpZ'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n      'JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'\n    ),\n  },\n  markets:{\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('6BWYu93T3ZiRntvYfRhqpkJJb7VNGt8yUcKPVSFCiYCa'),\n    },\n    [MarketPairEnum.BTCUSD]: {\n    },\n    [MarketPairEnum.ETHUSD]: {}\n  }\n};\n\nexport const STAGING_CONFIG = {\n  PARIMUTUEL_PROGRAM_ID: new PublicKey(\n    'GUhB2ohrfqWspztgCrQpAmeVFBWmnWYhPcZuwY52WWRe'\n  ),\n  INCENTIVE_PROGRAM_ID: new PublicKey(\n      '5u8mLVnUSQNSbKdZPNGTfWHGwV5uJh9by5Fa6jb6BP6h'\n  ),\n  STAKING_PROGRAM_ID: new PublicKey(\n      '2jmux3fWV5zHirkEZCoSMEgTgdYZqkE9Qx2oQnxoHRgA'\n  ),\n  NETWORK: new PublicKey('FoCmS48FRyJrx6bozDijaARYAThdUeUGu4rbGKqBegcH'),\n  HXRO_MINT: new PublicKey('HxhWkVpk5NS4Ltg5nij2G671CKXFRKPK8vy271Ub4uEK'),\n  ESHXRO_MINT: new PublicKey(\n      'CPwspzHc4bKtBQGNRhpRG9v3qRiPLWP28GrfZepwmBSz'\n  ),\n  LHXRO_MINT: new PublicKey(\n      '36VFoo1rQ7a1w45jBwHmr2sodnUUhRtL7K6fsx2tuMwb'\n  ),\n  USDC_MINT: new PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'),\n  BONK_MINT: new PublicKey('DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263'),\n  STAKE_POOL: new PublicKey('9zdpqAgENj4734TQvqjczMg2ekvvuGsxwJC6f7F1QWp4'),\n  oracles: {\n    HXRO_USD_ORACLE: new PublicKey(\n      'BJqTdFytBhGWpq183a5EPo123cB6gitTAmSSsCta3RGG'\n    ),\n    HXRO_PRICE_ORACLE: new PublicKey(\n      'B47CC1ULLw1jKTSsr1N1198zrUHp3LPduzepJyzgLn2g'\n    ),\n    SOL_USD_ORACLE: new PublicKey(\n      'ALP8SdU9oARYVLgLR7LrqMNCYBnhtnQz1cj6bwgwQmgj'\n    ),\n    SOL_PRICE_ORACLE: new PublicKey(\n      'H6ARHf6YXhGYeQfUzQNGk6rDNnLBQKrenN712K4AQJEG'\n    ),\n    BTC_USD_ORACLE: new PublicKey(\n      '4aDoSXJ5o3AuvL7QFeR6h44jALQfTmUUCTVGDD6aoJTM'\n    ),\n    BTC_PRICE_ORACLE: new PublicKey(\n      'GVXRSBjFk6e6J3NbVPXohDJetcTjaeeuykUpbQF8UoMU'\n    ),\n    ETH_USD_ORACLE: new PublicKey(\n      'EMkxjGC1CQ7JLiutDbfYb7UKb3zm9SJcUmr1YicBsdpZ'\n    ),\n    ETH_PRICE_ORACLE: new PublicKey(\n      'JBu1AL4obBcCMqKBBxhpWCNUt136ijcuMZLFvTP7iWdB'\n    ),\n  },\n  markets: {\n    [MarketPairEnum.SOLUSD]: {\n      MARKET_60S: new PublicKey('FN46bryerznhVr6hJUJt6aYCW8wVCDPdQhTNFVvgr8JJ'),\n      MARKET_300S: new PublicKey(\n        '5m89C7XsQRtuFFARMmKucnYdaNEf9mYXbLxJVGcdyJTU'\n        ),\n      MARKET_900S: new PublicKey(\n        'FnD3PLAbbsJYRufYR9qp8BGgcKmEbSBiC1zkvmj51i3J'\n      ),\n      MARKET_3600S: new PublicKey(\n        'GemLV88r4QsUiVAmc34pwFfaNjaw5BMBmhjqtHVByNra'\n      ),\n      MARKET_86400S: new PublicKey(\n        'GNV2wry1pFCpJeGrhM2e3app99VXTP7rpXUwQGrL1hHi'\n      ),\n    },\n    [MarketPairEnum.BTCUSD]: {\n      MARKET_60S: new PublicKey('9bqu5kYo3RUBY1kxSQjwpKPYrFzsFxEK7tHrxwLs3XWH'),\n      MARKET_300S: new PublicKey(\n        '3bH2HWjWNLgGWXbhHhK73fJEDeRQ7spj3fkyRyom6vpx'\n        ),\n      MARKET_900S: new PublicKey(\n        'CsXwpYNwkfrbMdoGWrj97yhuseLRuofy7fxj3Beesxv9'\n      ),\n      MARKET_3600S: new PublicKey(\n        '7c5PqmbTGsrWxCHXAfi9Rt2tTvG1oAdCK13FS8TKEpZ7'\n        ),\n      MARKET_86400S: new PublicKey(\n        'DpMZ7BGRYLF6xi6uD7ecaEjMv5aKx8gShzjhU4pscuqY'\n        ),\n      },\n    [MarketPairEnum.ETHUSD]: {\n      MARKET_60S: new PublicKey('EfFQtUkjv1ehWg9XrskkUL89sJ8ts4vGHavbo8TkQusL'),\n      MARKET_300S: new PublicKey(\n        '3DzpjP5cPP32Jkacu7MbEHNZYpiFpPozWQcJJaLgUXRH'\n      ),\n      MARKET_900S: new PublicKey(\n        '9xvKy77EQMeDw7z4ikNgXeRc2vWJgdbaLKBMSmEZbjXi'\n      ),\n      MARKET_3600S: new PublicKey(\n        '6fvFpHoXCxsafVuvNaH7Kdzbk66xmYhCyiTz4H1T89Qy'\n      ),\n      MARKET_86400S: new PublicKey(\n        'CYBcN2nM7oCH1BTt87GA4eP2vqLw2rTR1osgtAy7xyAg'\n      ),\n    },\n  },\n};\n\n// To correct the name of the config, it has same value with DEV_CONFIG for time being\nexport const DEVNET_CONFIG: ParimutuelConfig = DEV_CONFIG;\n\n// To correct the name of the config, it has same value with STAGING_CONFIG for time being\nexport const MAINNET_CONFIG = STAGING_CONFIG;\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { AttachCookieArgs } from '../borsh';\nimport { createAttachCookieInstruction } from '../instructions';\nimport {\n  decodeParimutuel,\n  findTraderPositionAccountPubkey,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendAttachCookieTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  storePubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { \n    PARIMUTUEL_PROGRAM_ID,\n    NETWORK \n  } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const attachCookieInstruction = await createAttachCookieInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new AttachCookieArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    parimutuelPubkey,\n    storePubkey,\n    traderPositionAccountPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [attachCookieInstruction],\n    signers,\n    'single',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to attach cookie');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { ParimutuelArgs } from '../borsh';\nimport { WalletSigner } from '../types';\nimport { createParimutuelInstruction } from '../instructions';\nimport {\n  findParimutuelPubkey,\n  findHoneypotPubkey,\n  decodeNetwork,\n  decodeMarket,\n  sendTransaction,\n} from '../utils';\n\n/**\n * create parimutuel transaction\n * @param userWallet user wallet\n * @param marketPubkey market pubkey where parimutuel will be created\n * @param marketOpen parimutuel creation time\n * @param timeWindowStart parimutuel start time\n * @param marketClose parimutuel end time\n * @returns transaction id\n */\nexport async function sendCreateParimutuelTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  marketPubkey: PublicKey,\n  marketOpen: number,\n  timeWindowStart: number,\n  marketClose: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelSettings = new ParimutuelArgs({\n    marketOpen: marketOpen,\n    marketClose: marketClose,\n    timeWindowStart: timeWindowStart,\n  });\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n\n  if (!networkAccount || !marketAccount) {\n    throw new Error('no network or market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n  const protocolProductOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingProductOracle\n  );\n  const protocolPriceOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingPriceOracle\n  );\n\n  const parimutuelPubkey = await findParimutuelPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    marketPubkey,\n    marketOpen,\n    timeWindowStart,\n    marketClose\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const createInstruction = await createParimutuelInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelSettings,\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementMintPubkey,\n    protocolProductOraclePubkey,\n    protocolPriceOraclePubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [createInstruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error(\n      `failed to create parimutuel: ${parimutuelPubkey.toBase58()}`\n    );\n  } else {\n    return response.transactionId;\n  }\n}\n","import { TransactionInstruction, Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { StoreArgs, FixedFees, Version } from '../borsh';\nimport {\n  createStoreInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport {\n  findStorePubkey,\n  findAssociatedTokenAccountPubkey,\n  sendTransaction,\n  decodeNetwork,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateStoreTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  storeWalletPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  protocolFeeBps: number,\n  settlementFeeBps: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const settings = new StoreArgs({\n    fees: new FixedFees({\n      version: Version.FixedFeesV1,\n      protocolFeeBps,\n      settlementFeeBps,\n    }),\n  });\n\n  const networkPubkey = NETWORK;\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const storePubkey = await findStorePubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    marketPubkey,\n    storeWalletPubkey\n  );\n\n  const storeProtocolFeeCollectorPubkey =\n    await findAssociatedTokenAccountPubkey(\n      storeWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const storeSettlementFeeCollectorPubkey =\n    await findAssociatedTokenAccountPubkey(\n      storeWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const [protocolFeeCollectorAccount, settlementFeeCollectorAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      storeProtocolFeeCollectorPubkey,\n      storeSettlementFeeCollectorPubkey,\n    ]);\n\n  if (!protocolFeeCollectorAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      storeProtocolFeeCollectorPubkey,\n      storeWalletPubkey,\n      storeWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementFeeCollectorAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      storeSettlementFeeCollectorPubkey,\n      storeWalletPubkey,\n      storeWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const storeInstruction = await createStoreInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    settings,\n    networkPubkey,\n    marketPubkey,\n    storeWalletPubkey,\n    userWalletPubkey,\n    storePubkey,\n    storeProtocolFeeCollectorPubkey,\n    storeSettlementFeeCollectorPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [...instructions, storeInstruction],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create store');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey, TransactionInstruction } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { UpdatePriceArgs } from '../borsh';\nimport {\n  createUpdatePriceInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport { WalletSigner } from '../types';\nimport {\n  findNetworkSettlementFeeCollectorPubkey,\n  findHoneypotPubkey,\n  decodeParimutuel,\n  decodeNetwork,\n  decodeMarket,\n  sendTransaction,\n} from '../utils';\n\nexport async function sendUpdatePriceTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n  const networkWalletPubkey = new PublicKey(decodedNetworkAccount.authority);\n  const protocolProductOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingProductOracle\n  );\n  const protocolPriceOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingPriceOracle\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const networkSettlementFeeCollectorPubkey =\n    await findNetworkSettlementFeeCollectorPubkey(\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const networkSettlementFeeCollector = await this.connection.getAccountInfo(\n    networkSettlementFeeCollectorPubkey\n  );\n  if (!networkSettlementFeeCollector) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      networkSettlementFeeCollectorPubkey,\n      networkWalletPubkey,\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const updatePriceInstruction = await createUpdatePriceInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePriceArgs(),\n    networkPubkey,\n    marketPubkey,\n    protocolProductOraclePubkey,\n    protocolPriceOraclePubkey,\n    settlementMintPubkey,\n    networkSettlementFeeCollectorPubkey,\n    honeypotPubkey,\n    parimutuelPubkey,\n    new PublicKey(decodedParimutuelAccount.creator)\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [...instructions, updatePriceInstruction],\n    signers,\n    'single',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to update price');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { TransactionInstruction, Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  NetworkTraderFeePayerArgs,\n  TraderAccountsArgs,\n  TraderPositionAccountArgs,\n  UpdatePositionArgs,\n} from '../borsh';\nimport {\n  createNetworkTraderFeePayerInstruction,\n  createTraderAccountInstruction,\n  createPlacePositionInstruction,\n  createTraderPositionAccountInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport { PositionSideEnum, WalletSigner } from '../types';\nimport {\n  findAssociatedTokenAccountPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  findTraderPositionAccountPubkey,\n  findEntryAccountPubkey,\n  findHoneypotPubkey,\n  decodeNetwork,\n  decodeParimutuel,\n  sendTransaction, findReservePubkey, findTraderFeeStatePubkey,\n} from '../utils';\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, Token, TOKEN_PROGRAM_ID } from '@solana/spl-token';\n\nexport async function sendPlacePositionTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey,\n  size: number,\n  side: PositionSideEnum,\n  seq: number,\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, INCENTIVE_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, parimutuelAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      parimutuelPubkey,\n    ]);\n\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    seq\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const reservePubkey = await findReservePubkey(\n    INCENTIVE_PROGRAM_ID,\n    networkPubkey,\n  );\n\n  const traderFeeStatePubkey = await findTraderFeeStatePubkey(\n    INCENTIVE_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey,\n    reservePubkey,\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey,\n    traderFeeStatePubkey,\n    reservePubkey,\n    INCENTIVE_PROGRAM_ID,\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const updatePositionInstruction = await createPlacePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePositionArgs({ size, side, seq }),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [\n      ...instructions,\n      traderAccountInstruction,\n      feePayerInstruction,\n      traderPositionAccountInstruction,\n      updatePositionInstruction,\n    ],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to update position');\n  } else {\n    return response.transactionId;\n  }\n}\n\nconst OPERATOR_FEE: number = 2.0;\nexport async function sendPlacePositionWithOperatorTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey,\n  size: number,\n  side: PositionSideEnum,\n  seq: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, INCENTIVE_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n  const tradeSize = size - (size * (OPERATOR_FEE / 100))\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, parimutuelAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      parimutuelPubkey,\n    ]);\n\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    seq\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const reservePubkey = await findReservePubkey(\n    INCENTIVE_PROGRAM_ID,\n    networkPubkey,\n  );\n\n  const traderFeeStatePubkey = await findTraderFeeStatePubkey(\n    INCENTIVE_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey,\n    reservePubkey,\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey,\n    traderFeeStatePubkey,\n    reservePubkey,\n    INCENTIVE_PROGRAM_ID,\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const updatePositionInstruction = await createPlacePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePositionArgs({ size: tradeSize, side: side, seq: seq }),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const sourceAccount = await Token.getAssociatedTokenAddress(\n    ASSOCIATED_TOKEN_PROGRAM_ID,\n    TOKEN_PROGRAM_ID,\n    settlementMintPubkey,\n    userWalletPubkey\n  );\n\n  let mATA;\n  if (settlementMintPubkey.toString() == this.config.BONK_MINT.toString()) {\n    mATA = new PublicKey('6p7aQTngHmPy3srAM1ZuC5BKoYz94TpQJqcYH941Z72B');\n  } else if (settlementMintPubkey.toString() == this.config.USDC_MINT.toString()) {\n    mATA = new PublicKey('8Ti1Wg3X6Bx4fuLwLcDwwsrmU3ghPBQwoRmqv8Gao73Q');\n  } else {\n    throw new Error('Settlement mint token not implemented');\n  }\n\n  const sendFeeToOperatorInstruction = Token.createTransferInstruction(\n    TOKEN_PROGRAM_ID,\n    sourceAccount,\n    mATA,\n    userWalletPubkey,\n    [],\n    ((OPERATOR_FEE / 100) * size),\n  )\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [\n      ...instructions,\n      sendFeeToOperatorInstruction,\n      traderAccountInstruction,\n      feePayerInstruction,\n      traderPositionAccountInstruction,\n      updatePositionInstruction,\n    ],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to update position');\n  } else {\n    return response.transactionId;\n  }\n}\n\nexport async function getPlacePositionInstruction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey,\n  size: number,\n  side: PositionSideEnum,\n  seq: number,\n): Promise<TransactionInstruction[]> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, INCENTIVE_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, parimutuelAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      parimutuelPubkey,\n    ]);\n\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    seq\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const reservePubkey = await findReservePubkey(\n    INCENTIVE_PROGRAM_ID,\n    networkPubkey,\n  );\n\n  const traderFeeStatePubkey = await findTraderFeeStatePubkey(\n    INCENTIVE_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey,\n    reservePubkey,\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey,\n    traderFeeStatePubkey,\n    reservePubkey,\n    INCENTIVE_PROGRAM_ID,\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const updatePositionInstruction = await createPlacePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new UpdatePositionArgs({ size, side, seq }),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey\n  );\n\n  const PlacePositionInstructionArr: TransactionInstruction[] = [\n    ...instructions,\n    traderAccountInstruction,\n    feePayerInstruction,\n    traderPositionAccountInstruction,\n    updatePositionInstruction,\n  ]\n\n  return PlacePositionInstructionArr\n}\n\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { SettlePositionArgs } from '../borsh';\nimport { createSettlePositionInstruction } from '../instructions';\nimport {\n  findNetworkSettlementFeeCollectorPubkey,\n  findMarketSettlementFeeCollectorPubkey,\n  findAssociatedTokenAccountPubkey,\n  findHoneypotPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeNetwork,\n  decodeParimutuel,\n  decodeMarket,\n  findTraderPositionAccountPubkey,\n  sendTransaction, findTraderFeeStatePubkey, findReservePubkey, findIncentiveSignerPubkey, findStakerStatePubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendSettlePositionTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  traderWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const {\n    NETWORK,\n    PARIMUTUEL_PROGRAM_ID,\n    INCENTIVE_PROGRAM_ID,\n    STAKING_PROGRAM_ID,\n    HXRO_MINT,\n    ESHXRO_MINT,\n    LHXRO_MINT,\n    STAKE_POOL,\n  } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const parimutuelCreatorPubkey = new PublicKey(decodedParimutuelAccount.creator);\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n  const networkWalletPubkey = new PublicKey(decodedNetworkAccount.authority);\n\n  const networkSettlementFeeCollectorPubkey =\n    await findNetworkSettlementFeeCollectorPubkey(\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const marketWalletPubkey = new PublicKey(decodeMarketAccount.authority);\n\n  const marketSettlementFeeCollectorPubkey =\n    await findMarketSettlementFeeCollectorPubkey(\n      marketWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    traderWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const [\n    networkSettlementFeeCollectorAccount,\n    marketSettlementFeeCollectorAccount,\n    settlementTokenAccount,\n    positionAccount,\n  ] = await this.connection.getMultipleAccountsInfo([\n    networkSettlementFeeCollectorPubkey,\n    marketSettlementFeeCollectorPubkey,\n    settlementTokenAccountPubkey,\n    traderPositionAccountPubkey,\n  ]);\n\n  if (!networkSettlementFeeCollectorAccount) {\n    throw new Error('no network settlement account');\n  }\n\n  if (!marketSettlementFeeCollectorAccount) {\n    throw new Error('no market settlement account');\n  }\n\n  if (!settlementTokenAccount) {\n    throw new Error('no settlement token account');\n  }\n\n  if (!positionAccount) {\n    throw new Error('no position account');\n  }\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    marketPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const reservePubkey = await findReservePubkey(\n      INCENTIVE_PROGRAM_ID,\n      networkPubkey,\n  );\n\n  const traderFeeStatePubkey = await findTraderFeeStatePubkey(\n      INCENTIVE_PROGRAM_ID,\n      traderWalletPubkey,\n      networkPubkey,\n      reservePubkey,\n  );\n\n  const incentiveSignerPubkey = await findIncentiveSignerPubkey(\n      PARIMUTUEL_PROGRAM_ID,\n      networkPubkey,\n  );\n\n  const stakerStatePubkey = await findStakerStatePubkey(\n      STAKING_PROGRAM_ID,\n      traderWalletPubkey,\n      STAKE_POOL,\n  );\n\n  const instruction = await createSettlePositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new SettlePositionArgs(),\n    networkPubkey,\n    marketPubkey,\n    traderWalletPubkey,\n    settlementMintPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderFeePayerPubkey,\n    networkTraderAccountPubkey,\n    networkSettlementFeeCollectorPubkey,\n    marketSettlementFeeCollectorPubkey,\n    marketTraderAccountPubkey,\n    traderPositionAccountPubkey,\n    honeypotPubkey,\n    parimutuelPubkey,\n    parimutuelCreatorPubkey,\n    traderFeeStatePubkey,\n    reservePubkey,\n    incentiveSignerPubkey,\n    STAKE_POOL,\n    stakerStatePubkey,\n    HXRO_MINT,\n    ESHXRO_MINT,\n    LHXRO_MINT,\n    INCENTIVE_PROGRAM_ID,\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to settle position');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { WithdrawFeeArgs } from '../borsh';\nimport { createWithdrawFeeInstruction } from '../instructions';\nimport {\n  findNetworkTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  findAssociatedTokenAccountPubkey,\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendWithdrawFeeTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  amount: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const withdrawInstruction = await createWithdrawFeeInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new WithdrawFeeArgs({ amount }),\n    networkPubkey,\n    userWallet.publicKey,\n    protocolMintPubkey,\n    protocolTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [withdrawInstruction],\n    signers,\n    'single',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to withdraw fee');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { NetworkTraderFeePayerArgs, TraderAccountsArgs } from '../borsh';\nimport {\n  createTraderAccountInstruction,\n  createNetworkTraderFeePayerInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport {\n  findAssociatedTokenAccountPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeNetwork,\n  sendTransaction, findReservePubkey, findTraderFeeStatePubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDepositFeeTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  marketPubkey: PublicKey,\n  mintPubkey: PublicKey,\n  amount: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, INCENTIVE_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n\n  const reservePubkey = await findReservePubkey(\n    INCENTIVE_PROGRAM_ID,\n    networkPubkey,\n  );\n\n  const traderFeeStatePubkey = await findTraderFeeStatePubkey(\n    INCENTIVE_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey,\n    reservePubkey,\n  );\n\n  const tradeAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey,\n    traderFeeStatePubkey,\n    reservePubkey,\n    INCENTIVE_PROGRAM_ID,\n  );\n\n  const feePayerInstruction = await createNetworkTraderFeePayerInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new NetworkTraderFeePayerArgs(),\n    networkPubkey,\n    userWalletPubkey,\n    protocolMintPubkey,\n    networkTraderAccountPubkey,\n    networkTraderFeePayerPubkey\n  );\n\n  const walletTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    mintPubkey\n  );\n  const walletTokenAccount = await this.connection.getAccountInfo(\n    walletTokenAccountPubkey\n  );\n\n  let walletAccountInstruction: TransactionInstruction | undefined = undefined;\n  if (!walletTokenAccount) {\n    walletAccountInstruction = createAssociatedTokenAccountInstruction(\n      walletTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      mintPubkey\n    );\n    instructions.push(walletAccountInstruction);\n  }\n\n  const depositInstruction = Token.createTransferInstruction(\n    TOKEN_PROGRAM_ID,\n    walletTokenAccountPubkey,\n    networkTraderFeePayerPubkey,\n    userWalletPubkey,\n    [],\n    amount\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [\n      ...instructions,\n      tradeAccountInstruction,\n      feePayerInstruction,\n      depositInstruction,\n    ],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to deposit fee');\n  } else {\n    return response.transactionId;\n  }\n}\n","import {\n  Transaction,\n  PublicKey,\n  Keypair,\n  sendAndConfirmTransaction,\n} from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { createAssociatedTokenAccountInstruction } from '../instructions';\nimport { findAssociatedTokenAccountPubkey } from '../utils';\n\n/**\n * send mint token\n * @param walletPubkey user wallet pubkey where token will send to\n * @param mintPubkey mint token pubkey\n * @param authorityKeypair keypair that owns mint token\n * @param amount amount to send\n * @returns void\n */\nexport async function sendTransferTokenTransaction(\n  this: ParimutuelWeb3,\n  walletPubkey: PublicKey,\n  mintPubkey: PublicKey,\n  authorityKeypair: Keypair,\n  amount: number\n): Promise<void> {\n  const tradeTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    walletPubkey,\n    mintPubkey\n  );\n\n  const traderTokenAccount = await this.connection.getAccountInfo(\n    tradeTokenAccountPubkey\n  );\n\n  if (!traderTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      tradeTokenAccountPubkey,\n      authorityKeypair.publicKey,\n      walletPubkey,\n      mintPubkey\n    );\n\n    const transaction = new Transaction().add(instruction);\n\n    const signature = await sendAndConfirmTransaction(\n      this.connection,\n      transaction,\n      [authorityKeypair],\n      { commitment: 'confirmed' }\n    );\n\n    if (!signature) {\n      throw new Error('failed to create trader token account');\n    }\n  }\n\n  const splToken = new Token(\n    this.connection,\n    mintPubkey,\n    TOKEN_PROGRAM_ID,\n    authorityKeypair\n  );\n\n  await splToken.mintTo(tradeTokenAccountPubkey, authorityKeypair, [], amount);\n}\n","import BN from 'bn.js';\nimport { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { NetworkUpdateArgs } from '../borsh';\nimport { WalletSigner } from '../types';\nimport { updateNetworkInstruction } from '../instructions';\nimport { TwoTieredFees } from '../borsh'\nimport {\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\n\n/**\n * update network transaction\n * @param userWallet user wallet\n * @param protocolMintPubkey: protocol mint address\n * @param settlementMintPubkey settlement mint address\n * @param protocolProductOraclePubkey: protocol product oracle address\n * @param protocolPriceOraclePubkey: protocol price oracle address\n * @param networkProtocolFeeCollectorPubkey: network protocol fee collector address\n * @param networkSettlementFeeCollectorPubkey: network settlement fee collector address\n * @param protocolTokenRequiredForMinFee: min protocol token required for reduced fee workflow\n * @param minProtocolFeeBps: min protocol fee bps in Tiered and Linear Fee structures\n * @param maxProtocolFeeBps: max protocol fee bps in Tiered and Linear Fee structures\n * @param minSettlementFeeBps: min settlement fee bps in Tiered and Linear Fee structures\n * @param maxSettlementFeeBps: min settlement fee bps in Tiered and Linear Fee structures\n * @returns transaction id\n */\nexport async function sendUpdateNetworkTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  protocolMintPubkey: PublicKey | unknown,\n  settlementMintPubkey: PublicKey | unknown,\n  protocolProductOraclePubkey: PublicKey | unknown,\n  protocolPriceOraclePubkey: PublicKey | unknown,\n  networkProtocolFeeCollectorPubkey: PublicKey | unknown,\n  networkSettlementFeeCollectorPubkey: PublicKey | unknown,\n  protocolTokenRequiredForMinFee: BN = new BN(1000000),\n  minProtocolFeeBps: number = 10,\n  maxProtocolFeeBps: number = 150,\n  minSettlementFeeBps: number = 100,\n  maxSettlementFeeBps: number = 300,\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkSettings = new NetworkUpdateArgs({\n    fees: new TwoTieredFees({\n      version: 1,\n      protocolTokenRequiredForMinFee,\n      minProtocolFeeBps,\n      maxProtocolFeeBps,\n      minSettlementFeeBps,\n      maxSettlementFeeBps,\n    }),\n  });\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount] = await this.connection.getMultipleAccountsInfo([\n    networkPubkey,\n  ]);\n\n  if (!networkAccount) {\n    throw new Error('no network or market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n\n  const ix = await updateNetworkInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    networkSettings,\n    networkPubkey,\n    userWalletPubkey, // User must be network authority\n    protocolProductOraclePubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolProductOracle),\n    protocolPriceOraclePubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolPriceOracle),\n    networkProtocolFeeCollectorPubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolFeeCollector),\n    networkSettlementFeeCollectorPubkey as PublicKey || new PublicKey(decodedNetworkAccount.settlementFeeCollector),\n    protocolMintPubkey as PublicKey || new PublicKey(decodedNetworkAccount.protocolToken),\n    settlementMintPubkey as PublicKey || new PublicKey(decodedNetworkAccount.settlementToken)\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [ix],\n    signers,\n    'max',\n    signers.length > 0,\n    false\n  );\n\n  if (!response) {\n    throw new Error(\n      `failed to update network: ${networkPubkey.toBase58()}`\n    );\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { DestroyParimutuelArgs } from '../borsh';\nimport { createDestroyParimutuelInstruction } from '../instructions';\nimport {\n  findHoneypotPubkey,\n  decodeNetwork,\n  decodeParimutuel,\n  decodeMarket,\n  sendTransaction,\n  findNetworkSettlementFeeCollectorPubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDestroyParimutuelTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const parimutuelCreatorPubkey = new PublicKey(\n    decodedParimutuelAccount.creator\n  );\n\n  const networkPubkey = NETWORK;\n\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const decodeMarketAccount = decodeMarket(Buffer.from(marketAccount.data));\n\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolProductOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingProductOracle\n  );\n  const protocolPriceOraclePubkey = new PublicKey(\n    decodeMarketAccount.underlyingPriceOracle\n  );\n\n  const honeypotPubkey = await findHoneypotPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    parimutuelPubkey\n  );\n\n  const settlementFeeCollector = await findNetworkSettlementFeeCollectorPubkey(networkPubkey, settlementMintPubkey)\n\n  const instruction = await createDestroyParimutuelInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new DestroyParimutuelArgs(),\n    networkPubkey,\n    marketPubkey,\n    protocolProductOraclePubkey,\n    protocolPriceOraclePubkey,\n    parimutuelPubkey,\n    parimutuelCreatorPubkey,\n    honeypotPubkey,\n    settlementMintPubkey,\n    settlementFeeCollector\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to destroy parimutuel');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { DestroyPositionEntryArgs } from '../borsh';\nimport { createDestroyPositionEntryInstruction } from '../instructions';\nimport {\n  decodeParimutuel,\n  sendTransaction,\n  findTraderPositionAccountPubkey,\n  findEntryAccountPubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDestroyPositionEntryTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  traderWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey,\n  sequenceNumber: number\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const networkPubkey = NETWORK;\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const entryAccountPubkey = await findEntryAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderPositionAccountPubkey,\n    sequenceNumber\n  );\n\n  const instruction = await createDestroyPositionEntryInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new DestroyPositionEntryArgs(),\n    networkPubkey,\n    marketPubkey,\n    traderWalletPubkey,\n    traderPositionAccountPubkey,\n    entryAccountPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to destroy position entry');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { DestroyPositionArgs } from '../borsh';\nimport { createDestroyPositionInstruction } from '../instructions';\nimport {\n  decodeParimutuel,\n  sendTransaction,\n  findTraderPositionAccountPubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendDestroyPositionTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  traderWalletPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n  const networkPubkey = NETWORK;\n  const [networkAccount, marketAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      networkPubkey,\n      marketPubkey,\n    ]);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  if (!marketAccount) {\n    throw new Error('no market account');\n  }\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    traderWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const instruction = await createDestroyPositionInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new DestroyPositionArgs(),\n    networkPubkey,\n    marketPubkey,\n    traderWalletPubkey,\n    traderPositionAccountPubkey,\n    parimutuelPubkey\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [instruction],\n    signers,\n    'max',\n    signers.length > 0,\n    false,\n    false\n  );\n\n  if (!response) {\n    throw new Error('failed to destroy position');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { ParimutuelWeb3 } from '../web3';\nimport { decodeLinearFees, decodeNetwork } from '../utils';\nimport { ParimutuelNetwork } from '../types';\n\nexport async function getNetwork(\n  this: ParimutuelWeb3\n): Promise<ParimutuelNetwork> {\n  const { NETWORK } = this.config;\n  const networkPubkey = NETWORK;\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('Failed to find network account');\n  }\n\n  const data = Buffer.from(networkAccount.data);\n  return {\n    pubkey: networkPubkey,\n    account: networkAccount,\n    info: {\n      network: decodeNetwork(data),\n      linearFees: decodeLinearFees(data.slice(-65)),\n    },\n  };\n}\n","import { getMarketPubkeys } from './../utils/parimutuel';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { decodeFixedFees, decodeMarket } from '../utils';\nimport { MarketPairEnum, ParimutuelMarket } from '../types';\nimport { notEmpty } from '../utils';\n\nexport async function getMarkets(\n  this: ParimutuelWeb3,\n  marketPair: MarketPairEnum\n): Promise<ParimutuelMarket[]> {\n  const markets = getMarketPubkeys(this.config, marketPair);\n  const marketPubkeys = markets.map((market) => market.pubkey);\n\n  const marketAccounts = await this.connection.getMultipleAccountsInfo(\n    marketPubkeys\n  );\n\n  return marketAccounts\n    .map((account, index) => {\n      if (!account) return null;\n\n      const data = Buffer.from(account.data);\n      return {\n        pubkey: marketPubkeys[index],\n        account: account,\n        info: {\n          market: decodeMarket(data),\n          fixedFees: decodeFixedFees(data.slice(-65)),\n        },\n      };\n    })\n    .filter(notEmpty);\n}\n","import { PublicKey } from '@solana/web3.js';\nimport _uniqWith from 'lodash/uniqWith';\nimport _isEqual from 'lodash/isEqual';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { MarketPubkey, ParimutuelAccount } from '../types';\nimport {\n  getUpcomingTimes,\n  getHistoricalTimes,\n  decodeParimutuel,\n  findParimutuelPubkey,\n  notEmpty,\n  getMultipleAccounts,\n} from '../utils';\n\nexport async function getParimutuel(\n  this: ParimutuelWeb3,\n  parimutuelPubkey: PublicKey\n): Promise<ParimutuelAccount> {\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  return {\n    pubkey: parimutuelPubkey,\n    account: parimutuelAccount,\n    info: {\n      parimutuel: decodeParimutuel(parimutuelAccount.data),\n    },\n  };\n}\n\nexport async function getParimutuels(\n  this: ParimutuelWeb3,\n  markets: MarketPubkey[],\n  number?: number\n): Promise<ParimutuelAccount[]> {\n  if (!markets) return [];\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const upcoming = markets\n    .map((market) => {\n      const { duration } = market;\n      return getUpcomingTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  const historical = markets\n    .map((market) => {\n      const { duration } = market;\n      return getHistoricalTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  // get unique time\n  const times = _uniqWith([...historical, ...upcoming], _isEqual);\n\n  const parimutuelPubkeys = await Promise.all(\n    times.map(async (time) => {\n      const pubkey = await findParimutuelPubkey(\n        PARIMUTUEL_PROGRAM_ID,\n        new PublicKey(time.marketPubkey),\n        0,\n        time.startTime,\n        time.startTime\n      );\n      return pubkey;\n    })\n  );\n\n  const parimutuelAccounts = await getMultipleAccounts(\n    this.connection,\n    parimutuelPubkeys.map((pubkey) => pubkey)\n  );\n\n  const filteredAccounts = parimutuelAccounts\n    .map((parimutuel, index) => {\n      if (!parimutuel) return null;\n      return {\n        pubkey: parimutuelPubkeys[index],\n        account: parimutuel.account,\n        info: {\n          parimutuel: decodeParimutuel(parimutuel.account.data),\n        },\n      };\n    })\n    .filter(notEmpty);\n\n  return filteredAccounts;\n}\n\nexport async function getUpcomingParimutuels(\n  this: ParimutuelWeb3,\n  markets: MarketPubkey[],\n  number?: number\n): Promise<ParimutuelAccount[]> {\n  if (!markets) return [];\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const upcoming = markets\n    .map((market) => {\n      const { duration } = market;\n      return getUpcomingTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  const parimutuelPubkeys = await Promise.all(\n    upcoming.map(async (time) => {\n      const pubkey = await findParimutuelPubkey(\n        PARIMUTUEL_PROGRAM_ID,\n        new PublicKey(time.marketPubkey),\n        0,\n        time.startTime,\n        time.startTime\n      );\n      return pubkey;\n    })\n  );\n\n  const parimutuelAccounts = await this.connection.getMultipleAccountsInfo(\n    parimutuelPubkeys.map((pubkey) => pubkey)\n  );\n\n  const filteredAccounts = parimutuelAccounts\n    .map((parimutuel, index) => {\n      if (!parimutuel) return null;\n      return {\n        pubkey: parimutuelPubkeys[index],\n        account: parimutuel,\n        info: {\n          parimutuel: decodeParimutuel(parimutuel.data),\n        },\n      };\n    })\n    .filter(notEmpty);\n\n  return filteredAccounts;\n}\n\nexport async function getLiveParimutuels(\n  this: ParimutuelWeb3,\n  markets: MarketPubkey[],\n  number?: number\n): Promise<ParimutuelAccount[]> {\n  if (!markets) return [];\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const historical = markets\n    .map((market) => {\n      const { duration } = market;\n      return getHistoricalTimes(\n        market.pubkey.toBase58(),\n        duration * 1000,\n        number ? number : 5\n      );\n    })\n    .flat();\n\n  const parimutuelPubkeys = await Promise.all(\n    historical.map(async (time) => {\n      const pubkey = await findParimutuelPubkey(\n        PARIMUTUEL_PROGRAM_ID,\n        new PublicKey(time.marketPubkey),\n        0,\n        time.startTime,\n        time.startTime\n      );\n      return pubkey;\n    })\n  );\n\n  const parimutuelAccounts = await this.connection.getMultipleAccountsInfo(\n    parimutuelPubkeys.map((pubkey) => pubkey)\n  );\n\n  const filteredAccounts = parimutuelAccounts\n    .map((parimutuel, index) => {\n      if (!parimutuel) return null;\n      return {\n        pubkey: parimutuelPubkeys[index],\n        account: parimutuel,\n        info: {\n          parimutuel: decodeParimutuel(parimutuel.data),\n        },\n      };\n    })\n    .filter(notEmpty);\n\n  return filteredAccounts;\n}\n","import {\n  PublicKey,\n  GetProgramAccountsConfig,\n  MemcmpFilter,\n  DataSizeFilter,\n} from '@solana/web3.js';\nimport _get from 'lodash/get';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  decodeParimutuel,\n  decodeTraderPositionAccount,\n  getMultipleAccounts,\n} from '../utils';\nimport { ParimutuelMarket, MarketInfo, ParimutuelPosition } from '../types';\n\nexport async function getUserPositions(\n  this: ParimutuelWeb3,\n  userWalletPubkey: PublicKey,\n  markets: ParimutuelMarket[]\n): Promise<ParimutuelPosition[]> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const traderPositionAccounts = await this.connection.getProgramAccounts(\n    PARIMUTUEL_PROGRAM_ID,\n    {\n      filters: [\n        { dataSize: 172 } as DataSizeFilter,\n        {\n          memcmp: {\n            offset: 74,\n            bytes: userWalletPubkey?.toBase58(),\n          },\n        } as MemcmpFilter,\n      ],\n    } as GetProgramAccountsConfig\n  );\n\n  const decodedAccounts = traderPositionAccounts.map((account) =>\n    decodeTraderPositionAccount(account.account.data)\n  );\n\n  const parimutuelAccounts = await getMultipleAccounts(\n    this.connection,\n    decodedAccounts.map((account) => new PublicKey(account.parimutuel))\n  );\n\n  const positions = traderPositionAccounts.map((account, index) => {\n    const parimutuel = decodeParimutuel(\n      _get(parimutuelAccounts, [index, 'account', 'data']) as Buffer\n    );\n    const position = decodeTraderPositionAccount(account.account.data);\n\n    return {\n      pubkey: account.pubkey,\n      account: account.account,\n      info: {\n        parimutuelPubkey: new PublicKey(position.parimutuel),\n        parimutuel,\n        market: _get(markets, [parimutuel.marketKey, 'info']) as MarketInfo,\n        position,\n      },\n    };\n  });\n\n  return positions;\n}\n\nexport async function getParimutuelPositions(\n  this: ParimutuelWeb3,\n  parimutuelPubkey: PublicKey\n): Promise<ParimutuelPosition[]> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const traderPositionAccounts = await this.connection.getProgramAccounts(\n    PARIMUTUEL_PROGRAM_ID,\n    {\n      filters: [\n        { dataSize: 172 } as DataSizeFilter,\n        {\n          memcmp: {\n            offset: 42,\n            bytes: parimutuelPubkey?.toBase58(),\n          },\n        } as MemcmpFilter,\n      ],\n    } as GetProgramAccountsConfig\n  );\n\n  const decodedAccounts = traderPositionAccounts.map((account) =>\n    decodeTraderPositionAccount(account.account.data)\n  );\n\n  const parimutuelAccounts = await getMultipleAccounts(\n    this.connection,\n    decodedAccounts.map((account) => new PublicKey(account.parimutuel))\n  );\n\n  const positions = traderPositionAccounts.map((account, index) => {\n    const parimutuel = decodeParimutuel(\n      _get(parimutuelAccounts, [index, 'account', 'data']) as Buffer\n    );\n    const position = decodeTraderPositionAccount(account.account.data);\n\n    return {\n      pubkey: account.pubkey,\n      account: account.account,\n      info: {\n        parimutuelPubkey: new PublicKey(position.parimutuel),\n        parimutuel,\n        market: _get([], [parimutuel.marketKey, 'info']) as MarketInfo,\n        position,\n      },\n    };\n  });\n\n  return positions;\n}\n","import {\n  PublicKey,\n  GetProgramAccountsConfig,\n  MemcmpFilter,\n  DataSizeFilter,\n} from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  decodeTraderEntryAccount,\n  decodeTraderPositionAccount,\n  getMultipleAccounts,\n} from '../utils';\nimport { ParimutuelEntry } from '../types';\n\nexport async function getEntries(\n  this: ParimutuelWeb3,\n  traderPositionPubkey: PublicKey\n): Promise<ParimutuelEntry[]> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const traderEntryAccounts = await this.connection.getProgramAccounts(\n    PARIMUTUEL_PROGRAM_ID,\n    {\n      filters: [\n        { dataSize: 123 } as DataSizeFilter,\n        {\n          memcmp: {\n            offset: 34,\n            bytes: traderPositionPubkey?.toBase58(),\n          },\n        } as MemcmpFilter,\n      ],\n    } as GetProgramAccountsConfig\n  );\n\n  const decodedEntryAccounts = traderEntryAccounts.map((account) =>\n    decodeTraderEntryAccount(account.account.data)\n  );\n\n  const traderPositionPubkeys = decodedEntryAccounts.map(\n    (account) => new PublicKey(account.traderPosition)\n  );\n\n  const traderPositionAccounts = await getMultipleAccounts(\n    this.connection,\n    traderPositionPubkeys\n  );\n\n  const decodedPositionAccounts = traderPositionAccounts.map((account) => {\n    if (account) {\n      return decodeTraderPositionAccount(account.account.data);\n    } else return null;\n  });\n\n  const entries = traderEntryAccounts.map((account, index) => {\n    const positionAccount = decodedPositionAccounts[index];\n\n    return {\n      pubkey: account.pubkey,\n      account: account.account,\n      info: {\n        parimutuelPubkey: new PublicKey(\n          positionAccount !== null ? positionAccount.parimutuel : ''\n        ),\n        entry: decodedEntryAccounts[index],\n      },\n    };\n  });\n\n  return entries;\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { ParimutuelFees } from '../types';\nimport { decodeAccount } from '../utils';\nimport {\n  findMarketProtocolFeeCollectorPubkey,\n  findMarketSettlementFeeCollectorPubkey,\n  findNetworkProtocolFeeCollectorPubkey,\n  findNetworkSettlementFeeCollectorPubkey,\n  decodeNetwork,\n} from '../utils';\n\nexport async function getFees(\n  this: ParimutuelWeb3,\n  networkWalletPubkey: PublicKey,\n  marketWalletPubkey: PublicKey\n): Promise<ParimutuelFees> {\n  let networkProtocolFeeAmount = 0;\n  let networkSettlementFeeAmount = 0;\n  let marketProtocolFeeAmount = 0;\n  let marketSettlementFeeAmount = 0;\n\n  const {\n    NETWORK,\n    NETWORK_PROTOCOL_FEE_COLLECTOR,\n    MARKET_PROTOCOL_FEE_COLLECTOR,\n  } = this.config;\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account');\n  }\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const networkProtocolFeeCollectorPubkey =\n    await findNetworkProtocolFeeCollectorPubkey(\n      networkWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const networkSettlementFeeCollectorPubkey =\n    await findNetworkSettlementFeeCollectorPubkey(\n      networkWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const marketProtocolFeeCollectorPubkey =\n    await findMarketProtocolFeeCollectorPubkey(\n      marketWalletPubkey,\n      protocolMintPubkey\n    );\n\n  const marketSettlementFeeCollectorPubkey =\n    await findMarketSettlementFeeCollectorPubkey(\n      marketWalletPubkey,\n      settlementMintPubkey\n    );\n\n  const [\n    networkProtocolFeeCollectorAccount,\n    networkSettlementFeeCollectorAccount,\n    marketProtocolFeeCollectorAccount,\n    marketSettlementFeeCollectorAccount,\n  ] = await this.connection.getMultipleAccountsInfo([\n    NETWORK_PROTOCOL_FEE_COLLECTOR ?? networkProtocolFeeCollectorPubkey,\n    networkSettlementFeeCollectorPubkey,\n    MARKET_PROTOCOL_FEE_COLLECTOR ?? marketProtocolFeeCollectorPubkey,\n    marketSettlementFeeCollectorPubkey,\n  ]);\n\n  if (networkProtocolFeeCollectorAccount) {\n    const decodedProtocolFeeCollector = decodeAccount(\n      networkProtocolFeeCollectorAccount.data\n    );\n    networkProtocolFeeAmount = Number(decodedProtocolFeeCollector.amount) || 0;\n  }\n\n  if (networkSettlementFeeCollectorAccount) {\n    const decodedSettlementFeeCollector = decodeAccount(\n      networkSettlementFeeCollectorAccount.data\n    );\n    networkSettlementFeeAmount = Number(decodedSettlementFeeCollector.amount) || 0;\n  }\n\n  if (marketProtocolFeeCollectorAccount) {\n    const decodedProtocolFeeCollector = decodeAccount(\n      marketProtocolFeeCollectorAccount.data\n    );\n    marketProtocolFeeAmount = Number(decodedProtocolFeeCollector.amount) || 0;\n  }\n\n  if (marketSettlementFeeCollectorAccount) {\n    const decodedSettlementFeeCollector = decodeAccount(\n      marketSettlementFeeCollectorAccount.data\n    );\n    marketSettlementFeeAmount = Number(decodedSettlementFeeCollector.amount) || 0;\n  }\n\n  return {\n    network: {\n      protocolFeeAccountPubkey:\n        NETWORK_PROTOCOL_FEE_COLLECTOR ?? networkProtocolFeeCollectorPubkey,\n      protocolFeeAmount: networkProtocolFeeAmount,\n      settlementFeeAccountPubkey: networkSettlementFeeCollectorPubkey,\n      settlementFeeAmount: networkSettlementFeeAmount,\n    },\n    market: {\n      protocolFeeAccountPubkey:\n        MARKET_PROTOCOL_FEE_COLLECTOR ?? marketProtocolFeeCollectorPubkey,\n      protocolFeeAmount: marketProtocolFeeAmount,\n      settlementFeeAccountPubkey: marketSettlementFeeCollectorPubkey,\n      settlementFeeAmount: marketSettlementFeeAmount,\n    },\n  };\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { decodeTraderAccount, findNetworkTraderAccountPubkey } from '../utils';\nimport { ParimutuelTraderAccount } from '../types';\n\nexport async function getNetworkTraderAccount(\n  this: ParimutuelWeb3,\n  userWalletPubkey: PublicKey,\n  networkPubkey: PublicKey\n): Promise<ParimutuelTraderAccount> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderAccount = await this.connection.getAccountInfo(\n    networkTraderAccountPubkey\n  );\n\n  if (!networkTraderAccount) {\n    throw new Error('no trader account');\n  }\n\n  return {\n    pubkey: networkTraderAccountPubkey,\n    account: networkTraderAccount,\n    info: {\n      traderAccount: decodeTraderAccount(networkTraderAccount?.data),\n    },\n  };\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport {\n  findNetworkTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeAccount,\n} from '../utils';\nimport { ParimutuelTraderFeePayerAccount } from '../types';\n\nexport async function getTraderFeePayerAccount(\n  this: ParimutuelWeb3,\n  userWalletPubkey: PublicKey,\n  networkPubkey: PublicKey\n): Promise<ParimutuelTraderFeePayerAccount> {\n  const { PARIMUTUEL_PROGRAM_ID } = this.config;\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const traderFeePayerAccount = await this.connection.getAccountInfo(\n    networkTraderFeePayerPubkey\n  );\n\n  if (!traderFeePayerAccount) {\n    throw new Error('no fee payer account');\n  }\n\n  return {\n    pubkey: networkTraderFeePayerPubkey,\n    account: traderFeePayerAccount,\n    info: {\n      tokenAccount: {\n        pubkey: networkTraderFeePayerPubkey.toBase58(),\n        account: traderFeePayerAccount,\n        info: decodeAccount(traderFeePayerAccount.data),\n      },\n    },\n  };\n}\n","import { PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { Store } from '../borsh';\nimport { decodeFixedFees, decodeStore } from '../utils';\n\nexport async function getStore(\n  this: ParimutuelWeb3,\n  storePubkey: PublicKey\n): Promise<Store> {\n  const account = await this.connection.getAccountInfo(storePubkey);\n\n  if (!account) {\n    throw new Error('Failed to find account');\n  }\n\n  const data = Buffer.from(account.data);\n  const store = decodeStore(data);\n  const storeFees = decodeFixedFees(data.slice(-65));\n  store.fee = storeFees;\n  return store;\n}\n","import { Connection, clusterApiUrl } from '@solana/web3.js';\n\nimport {\n  sendAttachCookieTransaction,\n  sendCreateParimutuelTransaction,\n  sendCreateStoreTransaction,\n  sendDepositFeeTransaction,\n  sendPlacePositionTransaction,\n  getPlacePositionInstruction,\n  sendPlacePositionWithOperatorTransaction,\n  sendSettlePositionTransaction,\n  sendTransferTokenTransaction,\n  sendUpdatePriceTransaction,\n  sendWithdrawFeeTransaction,\n  sendUpdateNetworkTransaction,\n  sendDestroyParimutuelTransaction,\n  sendDestroyPositionTransaction,\n  sendDestroyPositionEntryTransaction,\n} from '../transactions';\nimport {\n  getFees,\n  getMarkets,\n  getNetwork,\n  getStore,\n  getNetworkTraderAccount,\n  getParimutuel,\n  getParimutuels,\n  getUserPositions,\n  getParimutuelPositions,\n  getTraderFeePayerAccount,\n  getEntries,\n} from '../queries';\n\nimport { ParimutuelConfig } from './config';\nimport { ParimutuelWeb3Interface } from './interface';\n\nexport class ParimutuelWeb3 implements ParimutuelWeb3Interface {\n  config: ParimutuelConfig;\n  connection: Connection;\n\n  constructor(config: ParimutuelConfig, connection?: Connection) {\n    this.config = config;\n    this.connection = new Connection(\n      config.SOLANA_CLUSTER_URL ?? clusterApiUrl('devnet'),\n      'recent'\n    );\n\n    if (connection) {\n      this.connection = connection;\n    }\n  }\n\n  updateNetwork = sendUpdateNetworkTransaction.bind(this);\n\n  createParimutuel = sendCreateParimutuelTransaction.bind(this);\n\n  updatePrice = sendUpdatePriceTransaction.bind(this);\n\n  placePosition = sendPlacePositionTransaction.bind(this);\n\n  getPlacePositionInstruction = getPlacePositionInstruction.bind(this);\n\n  placePositionWithOperator = sendPlacePositionWithOperatorTransaction.bind(this);\n\n  settlePosition = sendSettlePositionTransaction.bind(this);\n\n  destroyParimutuel = sendDestroyParimutuelTransaction.bind(this);\n\n  destroyPosition = sendDestroyPositionTransaction.bind(this);\n\n  destroyPositionEntry = sendDestroyPositionEntryTransaction.bind(this);\n\n  transferToken = sendTransferTokenTransaction.bind(this);\n\n  depositFee = sendDepositFeeTransaction.bind(this);\n\n  withdrawFee = sendWithdrawFeeTransaction.bind(this);\n\n  createStore = sendCreateStoreTransaction.bind(this);\n\n  attachCookie = sendAttachCookieTransaction.bind(this);\n\n  getFees = getFees.bind(this);\n\n  getMarkets = getMarkets.bind(this);\n\n  getNetwork = getNetwork.bind(this);\n\n  getNetworkTraderAccount = getNetworkTraderAccount.bind(this);\n\n  getParimutuel = getParimutuel.bind(this);\n\n  getParimutuels = getParimutuels.bind(this);\n\n  getUserPositions = getUserPositions.bind(this);\n\n  getParimutuelPositions = getParimutuelPositions.bind(this);\n\n  getEntries = getEntries.bind(this);\n\n  getStore = getStore.bind(this);\n\n  getTraderFeePayerAccount = getTraderFeePayerAccount.bind(this);\n}\n","// old method\nexport const calculateOdd = (position: number, total: number): string =>\n  position && total ? Number(1 / (position / total)).toFixed(2) : \"0\";\n// new method\nexport const calculateNetOdd = (position: number, total: number, rake: number): string =>\n  position && total ? Number(total * (1.0 - rake) / position).toFixed(2) : \"0\";","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { MarketArgs, schema } from '../borsh';\n\nexport const createMarketInstruction = async (\n  programId: PublicKey,\n  settings: MarketArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  marketWalletPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  marketProtocolFeeCollectorPubkey: PublicKey,\n  marketSettlementFeeCollectorPubkey: PublicKey,\n  payerPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: marketProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import {\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n  PublicKey,\n} from '@solana/web3.js';\nimport { serialize } from 'borsh';\n\nimport { TraderSequenceNumberArgs, schema } from '../borsh';\n\nexport const createTraderSequenceNumberInstruction = async (\n  programId: PublicKey,\n  settings: TraderSequenceNumberArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  traderSequenceNumberPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n  const payerPubkey = userWalletPubkey;\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: traderSequenceNumberPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: payerPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data,\n  });\n};\n","import { TransactionInstruction, PublicKey } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { serialize } from 'borsh';\n\nimport { SettlePositionArgs, schema } from '../borsh';\n\nexport const createTransferFundsInstruction = async (\n  programId: PublicKey,\n  settings: SettlePositionArgs,\n  networkPubkey: PublicKey,\n  marketPubkey: PublicKey,\n  userWalletPubkey: PublicKey,\n  protocolProductOraclePubkey: PublicKey,\n  protocolPriceOraclePubkey: PublicKey,\n  protocolMintPubkey: PublicKey,\n  settlementMintPubkey: PublicKey,\n  protocolTokenAccountPubkey: PublicKey,\n  settlementTokenAccountPubkey: PublicKey,\n  networkProtocolFeeCollectorPubkey: PublicKey,\n  networkSettlementFeeCollectorPubkey: PublicKey,\n  networkTraderAccountPubkey: PublicKey,\n  marketTraderAccountPubkey: PublicKey,\n  marketProtocolFeeCollectorPubkey: PublicKey,\n  marketSettlementFeeCollectorPubkey: PublicKey,\n  traderPositionAccountPubkey: PublicKey,\n  storePubkey: PublicKey,\n  storeProtocolFeeCollectorPubkey: PublicKey,\n  storeSettlementFeeCollectorPubkey: PublicKey,\n  honeypotPubkey: PublicKey,\n  parimutuelPubkey: PublicKey\n): Promise<TransactionInstruction> => {\n  const data = Buffer.from(serialize(schema, settings));\n\n  return new TransactionInstruction({\n    keys: [\n      {\n        pubkey: networkPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: parimutuelPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: honeypotPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: userWalletPubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementTokenAccountPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: marketTraderAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: traderPositionAccountPubkey,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: protocolProductOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolPriceOraclePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: protocolMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: settlementMintPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: networkSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: marketSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storePubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeProtocolFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: storeSettlementFeeCollectorPubkey,\n        isSigner: false,\n        isWritable: false,\n      },\n    ],\n    programId: programId,\n    data: data,\n  });\n};\n","import { MintData } from '../types';\n\nexport const getMintDecimals = (\n  mints: MintData[],\n  cryptoAddress: string\n): number => {\n  const found = mints.find((mint) => mint.address === cryptoAddress);\n  return found?.mint.decimals ?? 0;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string =>\n  `${address.slice(0, chars)}...${address.slice(-chars)}`;\n","import { PublicKey, Keypair } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { NetworkTraderFeePayerArgs } from '../borsh';\nimport { createNetworkTraderFeePayerInstruction } from '../instructions';\nimport {\n  findNetworkTraderAccountPubkey,\n  findNetworkTraderFeePayerPubkey,\n  decodeNetwork,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateNetworkTraderFeePayerTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const networkTraderFeePayerPubkey = await findNetworkTraderFeePayerPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    networkTraderAccountPubkey\n  );\n\n  const networkTraderFeePayerInstruction =\n    await createNetworkTraderFeePayerInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new NetworkTraderFeePayerArgs(),\n      networkPubkey,\n      userWallet.publicKey,\n      protocolMintPubkey,\n      networkTraderAccountPubkey,\n      networkTraderFeePayerPubkey\n    );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [networkTraderFeePayerInstruction],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create fee payer account');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { TransactionInstruction, Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { TraderAccountsArgs } from '../borsh';\nimport {\n  createTraderAccountInstruction,\n  createAssociatedTokenAccountInstruction,\n} from '../instructions';\nimport {\n  findAssociatedTokenAccountPubkey,\n  findNetworkTraderAccountPubkey,\n  findMarketTraderAccountPubkey,\n  decodeNetwork,\n  sendTransaction, findReservePubkey, findTraderFeeStatePubkey,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateTraderAccountTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  marketPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const instructions: TransactionInstruction[] = [];\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, INCENTIVE_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const networkAccount = await this.connection.getAccountInfo(networkPubkey);\n  if (!networkAccount) {\n    throw new Error('no network account'); // TODO: centralize error\n  }\n\n  const decodedNetworkAccount = decodeNetwork(Buffer.from(networkAccount.data));\n  const protocolMintPubkey = new PublicKey(decodedNetworkAccount.protocolToken);\n  const settlementMintPubkey = new PublicKey(\n    decodedNetworkAccount.settlementToken\n  );\n\n  const protocolTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    protocolMintPubkey\n  );\n\n  const settlementTokenAccountPubkey = await findAssociatedTokenAccountPubkey(\n    userWalletPubkey,\n    settlementMintPubkey\n  );\n\n  const [protocolTokenAccount, settlementTokenAccount] =\n    await this.connection.getMultipleAccountsInfo([\n      protocolTokenAccountPubkey,\n      settlementTokenAccountPubkey,\n    ]);\n\n  if (!protocolTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      protocolTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      protocolMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  if (!settlementTokenAccount) {\n    const instruction = createAssociatedTokenAccountInstruction(\n      settlementTokenAccountPubkey,\n      userWalletPubkey,\n      userWalletPubkey,\n      settlementMintPubkey\n    );\n    instructions.push(instruction);\n  }\n\n  const networkTraderAccountPubkey = await findNetworkTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey\n  );\n\n  const marketTraderAccountPubkey = await findMarketTraderAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    marketPubkey\n  );\n\n  const reservePubkey = await findReservePubkey(\n    INCENTIVE_PROGRAM_ID,\n    networkPubkey,\n  );\n\n  const traderFeeStatePubkey = await findTraderFeeStatePubkey(\n    INCENTIVE_PROGRAM_ID,\n    userWalletPubkey,\n    networkPubkey,\n    reservePubkey,\n  );\n\n  const traderAccountInstruction = await createTraderAccountInstruction(\n    PARIMUTUEL_PROGRAM_ID,\n    new TraderAccountsArgs(),\n    networkPubkey,\n    marketPubkey,\n    userWalletPubkey,\n    protocolTokenAccountPubkey,\n    settlementTokenAccountPubkey,\n    networkTraderAccountPubkey,\n    marketTraderAccountPubkey,\n    traderFeeStatePubkey,\n    reservePubkey,\n    INCENTIVE_PROGRAM_ID,\n  );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [...instructions, traderAccountInstruction],\n    signers,\n    'max',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create trader account');\n  } else {\n    return response.transactionId;\n  }\n}\n","import { Keypair, PublicKey } from '@solana/web3.js';\n\nimport { ParimutuelWeb3 } from '../web3';\nimport { TraderPositionAccountArgs } from '../borsh';\nimport { createTraderPositionAccountInstruction } from '../instructions';\nimport {\n  findTraderPositionAccountPubkey,\n  decodeParimutuel,\n  sendTransaction,\n} from '../utils';\nimport { WalletSigner } from '../types';\n\nexport async function sendCreateTraderPositionAccountTransaction(\n  this: ParimutuelWeb3,\n  userWallet: WalletSigner | Keypair,\n  parimutuelPubkey: PublicKey\n): Promise<string> {\n  if (!userWallet.publicKey) throw new Error('user wallet not connected');\n\n  const signers: Keypair[] = [];\n  const { PARIMUTUEL_PROGRAM_ID, NETWORK } = this.config;\n  const userWalletPubkey = userWallet.publicKey;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (userWallet?.hasOwnProperty('_keypair')) {\n    signers.push(userWallet as Keypair);\n  }\n\n  const networkPubkey = NETWORK;\n\n  const parimutuelAccount = await this.connection.getAccountInfo(\n    parimutuelPubkey\n  );\n  if (!parimutuelAccount) {\n    throw new Error('no parimutuel account');\n  }\n\n  const decodedParimutuelAccount = decodeParimutuel(\n    Buffer.from(parimutuelAccount.data)\n  );\n  const marketPubkey = new PublicKey(decodedParimutuelAccount.marketKey);\n\n  const traderPositionAccountPubkey = await findTraderPositionAccountPubkey(\n    PARIMUTUEL_PROGRAM_ID,\n    userWalletPubkey,\n    parimutuelPubkey\n  );\n\n  const traderPositionAccountInstruction =\n    await createTraderPositionAccountInstruction(\n      PARIMUTUEL_PROGRAM_ID,\n      new TraderPositionAccountArgs(),\n      networkPubkey,\n      marketPubkey,\n      userWalletPubkey,\n      traderPositionAccountPubkey,\n      parimutuelPubkey\n    );\n\n  const response = await sendTransaction(\n    this.connection,\n    userWallet as WalletSigner,\n    [traderPositionAccountInstruction],\n    signers,\n    'single',\n    signers.length > 0\n  );\n\n  if (!response) {\n    throw new Error('failed to create trader account');\n  } else {\n    return response.transactionId;\n  }\n}\n"],"names":["Version","createAssociatedTokenAccountInstruction","associatedTokenPubkey","payerPubkey","walletPubkey","splTokenMintPubkey","TransactionInstruction","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","ASSOCIATED_TOKEN_PROGRAM_ID","data","Buffer","from","FixedFees","args","version","protocolFeeBps","settlementFeeBps","_padding1","_padding2","_padding8","BN","_padding16","_padding8_0","_padding8_1","_padding8_2","_padding8_3","this","LinearFees","protocolTokenRequiredForMinFee","minProtocolFeeBps","maxProtocolFeeBps","minSettlementFeeBps","maxSettlementFeeBps","_padding4","TwoTieredFees","CryptoEnum","MarketEnum","MarketTypeEnum","MarketPairEnum","CurrencyEnum","DurationEnum","MarketStatusEnum","PositionSideEnum","_this","MultiTieredFees","tiers","stakedAmount","Network","bumpSeed","authority","protocolToken","settlementToken","protocolProductOracle","protocolPriceOracle","protocolFeeCollector","settlementFeeCollector","fee","Store","marketKey","wallet","Market","network","underlyingProductOracle","underlyingPriceOracle","duration","contractSize","Parimutuel","strike","index","slot","marketOpen","marketClose","timeWindowStart","honeypot","numPositions","numPositionsSettled","numPositionsDestroyed","expired","rewardPerShare","activeLongPositions","activeShortPositions","networkFees","marketFees","creator","TraderAccount","traderWallet","aggregationLevelKey","profit","loss","wins","losses","TraderPositionAccount","sequenceNumber","parimutuel","hasStore","store","longPosition","shortPosition","numEntries","paid","payout","TraderEntryAccount","traderPosition","direction","amount","timestamp","TraderSequenceNumber","traderKey","NetworkArgs","instruction","fees","NetworkUpdateArgs","MarketArgs","StoreArgs","ParimutuelArgs","UpdatePriceArgs","TraderAccountsArgs","TraderPositionAccountArgs","TraderSequenceNumberArgs","AttachCookieArgs","UpdatePositionArgs","size","side","seq","SettlePositionArgs","NetworkTraderFeePayerArgs","WithdrawFeeArgs","DestroyParimutuelArgs","DestroyPositionArgs","DestroyPositionEntryArgs","schema","Map","kind","fields","createAttachCookieInstruction","settings","networkPubkey","marketPubkey","userWalletPubkey","parimutuelPubkey","storePubkey","traderPositionAccountPubkey","serialize","updateNetworkInstruction","networkWalletPubkey","protocolProductOraclePubkey","protocolPriceOraclePubkey","networkProtocolFeeCollectorPubkey","networkSettlementFeeCollectorPubkey","protocolMintPubkey","settlementMintPubkey","createUpdatePriceInstruction","honeypotPubkey","parimutuelCreatorPubkey","SYSVAR_CLOCK_PUBKEY","createNetworkTraderFeePayerInstruction","networkTraderAccountPubkey","networkTraderFeePayerPubkey","createTraderAccountInstruction","protocolTokenAccountPubkey","settlementTokenAccountPubkey","marketTraderAccountPubkey","traderFeeStatePubkey","reservePubkey","incentiveProgramId","createTraderPositionAccountInstruction","createParimutuelInstruction","createStoreInstruction","storeWalletPubkey","storeProtocolFeeCollectorPubkey","storeSettlementFeeCollectorPubkey","createPlacePositionInstruction","entryAccountPubkey","createSettlePositionInstruction","marketSettlementFeeCollectorPubkey","traderFeeState","reserve","incentiveSigner","stakePool","stakerState","hxroMint","eshxroMint","lhxroMint","createWithdrawFeeInstruction","createDestroyParimutuelInstruction","createDestroyPositionEntryInstruction","createDestroyPositionInstruction","extendBorsh","BinaryReader","prototype","readPubkey","array","readFixedArray","PublicKey","BinaryWriter","writePubkey","value","writeFixedArray","toBuffer","readPubkeyAsString","base58","encode","writePubkeyAsString","decode","readMultiTieredFeesStakedAmount","Array","i","readU32","writeMultiTieredFeesStakedAmount","writeU32","readMultiTieredFeesSettlementFeeBps","readU16","writeMultiTieredFeesSettlementFeeBps","writeU16","getProtocolMint","getMarketPubkeys","config","marketPair","market","_get","markets","push","notEmpty","findProgramAddress","seeds","key","reduce","acc","toString","window","cached","localStorage","_localStorage","getItem","JSON","parse","parseInt","nonce","result","setItem","stringify","toBase58","findParimutuelPubkey","marketPubKey","Uint8Array","toArray","findNetworkProtocolFeeCollectorPubkey","findNetworkSettlementFeeCollectorPubkey","findMarketProtocolFeeCollectorPubkey","marketWalletPubkey","findMarketSettlementFeeCollectorPubkey","findAssociatedTokenAccountPubkey","mintPubkey","findNetworkTraderAccountPubkey","findMarketTraderAccountPubkey","findTraderFeeStatePubkey","findReservePubkey","findIncentiveSignerPubkey","findStakerStatePubkey","stakingProgramId","findHoneypotPubkey","findTraderPositionAccountPubkey","findEntryAccountPubkey","findNetworkTraderFeePayerPubkey","findStorePubkey","getMultipleAccountsCore","connection","pubkeys","map","commitment","_rpcRequest","res","error","Error","join","message","account","lamports","executable","owner","idx","getMultipleAccounts","length","batches","_chunk","Promise","all","batch","results","flat","getHistoricalTimes","number","currentTime","Date","getTime","startTime","num","reverse","getUpcomingTimes","decodeAccount","accountInfo","AccountLayout","mint","u64","fromBuffer","delegateOption","delegate","delegatedAmount","isInitialized","state","isFrozen","isNativeOption","rentExemptReserve","isNative","closeAuthority","closeAuthorityOption","decodeFixedFees","buffer","deserializeUnchecked","decodeLinearFees","decodeNetwork","decodeStore","decodeMarket","decodeParimutuel","decodeTraderAccount","decodeTraderPositionAccount","decodeTraderEntryAccount","pact","o","onRejected","s","getUnixTs","sleep","ms","resolve","setTimeout","ConfigEnum","sendSignedTransaction","signedTransaction","retry","timeout","confirmation","rawTransaction","sendRawTransaction","skipPreflight","transactionId","done","console","log","status","confirmations","err","subId","reject","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","_connection$_signatur","removeSignatureListener","awaitTransactionSignatureConfirmation","simulateResult","logs","line","startsWith","slice","transaction","getRecentBlockhash","recentBlockhash","_connection$getRecent","blockhash","signData","serializeMessage","encodedTransaction","_serialize","encoding","simulateTransaction","_simulateTransaction","sendTransaction","userWallet","instructions","signers","includesFeePayer","block","beforeSend","_connection$getRecent2","setSigners","publicKey","partialSign","signTransaction","Transaction","forEach","add","sendAttachCookieTransaction","_this2","PARIMUTUEL_PROGRAM_ID","NETWORK","hasOwnProperty","getAccountInfo","parimutuelAccount","decodedParimutuelAccount","attachCookieInstruction","response","sendCreateParimutuelTransaction","parimutuelSettings","getMultipleAccountsInfo","networkAccount","marketAccount","decodedNetworkAccount","decodeMarketAccount","createInstruction","sendCreateStoreTransaction","FixedFeesV1","settlementFeeCollectorAccount","storeInstruction","sendUpdatePriceTransaction","networkSettlementFeeCollector","updatePriceInstruction","getPlacePositionInstruction","_this6","INCENTIVE_PROGRAM_ID","settlementTokenAccount","traderAccountInstruction","feePayerInstruction","traderPositionAccountInstruction","updatePositionInstruction","sendPlacePositionWithOperatorTransaction","_this4","tradeSize","OPERATOR_FEE","Token","getAssociatedTokenAddress","sourceAccount","mATA","BONK_MINT","USDC_MINT","sendFeeToOperatorInstruction","createTransferInstruction","sendPlacePositionTransaction","sendSettlePositionTransaction","traderWalletPubkey","STAKING_PROGRAM_ID","HXRO_MINT","ESHXRO_MINT","LHXRO_MINT","STAKE_POOL","marketSettlementFeeCollectorAccount","positionAccount","incentiveSignerPubkey","stakerStatePubkey","sendWithdrawFeeTransaction","withdrawInstruction","sendDepositFeeTransaction","tradeAccountInstruction","walletTokenAccountPubkey","walletTokenAccount","walletAccountInstruction","undefined","depositInstruction","sendTransferTokenTransaction","authorityKeypair","tradeTokenAccountPubkey","traderTokenAccount","splToken","mintTo","sendAndConfirmTransaction","signature","sendUpdateNetworkTransaction","networkSettings","ix","sendDestroyParimutuelTransaction","sendDestroyPositionEntryTransaction","sendDestroyPositionTransaction","getNetwork","info","linearFees","getMarkets","marketPubkeys","marketAccounts","fixedFees","filter","getParimutuels","upcoming","historical","times","_uniqWith","_isEqual","time","parimutuelPubkeys","parimutuelAccounts","getParimutuel","getParimutuelPositions","getProgramAccounts","filters","dataSize","memcmp","offset","bytes","traderPositionAccounts","decodedAccounts","position","getUserPositions","getEntries","traderPositionPubkey","traderEntryAccounts","decodedEntryAccounts","traderPositionPubkeys","decodedPositionAccounts","entry","getFees","networkProtocolFeeAmount","networkSettlementFeeAmount","marketProtocolFeeAmount","marketSettlementFeeAmount","NETWORK_PROTOCOL_FEE_COLLECTOR","MARKET_PROTOCOL_FEE_COLLECTOR","marketProtocolFeeCollectorPubkey","networkProtocolFeeCollectorAccount","networkSettlementFeeCollectorAccount","marketProtocolFeeCollectorAccount","decodedProtocolFeeCollector","Number","decodedSettlementFeeCollector","protocolFeeAccountPubkey","protocolFeeAmount","settlementFeeAccountPubkey","settlementFeeAmount","getNetworkTraderAccount","networkTraderAccount","traderAccount","getTraderFeePayerAccount","traderFeePayerAccount","tokenAccount","getStore","storeFees","DEV_CONFIG","oracles","HXRO_USD_ORACLE","HXRO_PRICE_ORACLE","SOL_USD_ORACLE","SOL_PRICE_ORACLE","BTC_USD_ORACLE","BTC_PRICE_ORACLE","ETH_USD_ORACLE","ETH_PRICE_ORACLE","SOLUSD","MARKET_60S","MARKET_300S","MARKET_900S","MARKET_3600S","MARKET_86400S","BTCUSD","ETHUSD","DEV_BONK_CONFIG","SOLANA_CLUSTER_URL","STAGING_BONK_CONFIG","STAGING_CONFIG","DEVNET_CONFIG","MAINNET_CONFIG","updateNetwork","bind","createParimutuel","updatePrice","placePosition","placePositionWithOperator","settlePosition","destroyParimutuel","destroyPosition","destroyPositionEntry","transferToken","depositFee","withdrawFee","createStore","attachCookie","Connection","clusterApiUrl","total","rake","toFixed","traderSequenceNumberPubkey","MintLayout","span","mintInfo","mintAuthority","mintAuthorityOption","supply","freezeAuthority","freezeAuthorityOption","underlyingProductOraclePubkey","underlyingPriceOraclePubkey","protocolFeeCollectorPubkey","settlementFeeCollectorPubkey","unixTime","moment","unix","format","hours","Math","floor","minutes","seconds","SETTLED","LIVE","UPCOMING","mints","cryptoAddress","found","find","address","decimals","Boolean","toNumber","MarketV1","NetworkV1","ParimutuelV1","StoreV1","TraderAccountV1","ParimutuelTraderPositionAccountV1","TraderSequenceNumberV1","networkTraderFeePayerInstruction","chars"],"mappings":"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"}